a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,figcaption,figure,footer,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;vertical-align:baseline}fieldset,form{vertical-align:baseline}form{padding:0;border:0}a{text-decoration:none}a:hover{text-decoration:underline}ol,ul{list-style:none}blockquote:after,blockquote:before,q:after,q:before{content:none}table{border-collapse:collapse;border-spacing:0}textarea{overflow:auto;vertical-align:top;resize:vertical}audio,canvas,video{display:inline-block;*display:inline;*zoom:1;max-width:100%}a:focus{outline:thin dotted}a:active,a:hover{outline:0}form{margin:0}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}button,input{line-height:normal}button,select{text-transform:none}button[disabled],html input[disabled]{cursor:default}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}.chromeframe{margin:.2em 0;background:#ccc;color:#000;padding:.2em 0}*,::after,::before{-webkit-box-sizing:border-box;box-sizing:border-box}body{font:14px/1.5 -apple-system,"Plus Jakarta Sans",Roboto,sans-serif;background:#fff;max-width:1440px;color:#fff}body.no-scroll{overflow:hidden}.container{max-width:1192px;margin:0 auto}.header-autor{background:#1c1c1c;position:relative}.header__autor-list{position:absolute;top:26px;right:124px}.header__box{position:absolute;top:192px;left:124px}.header__autor-top{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;margin-bottom:86px}.header__autor-top--title{max-width:56.1%}.header__autor-top--title h2{font:500 72px/110% "Open Sans";color:#f9f9f9;margin-right:64px}@media (max-width:1300px){.header__autor-list{right:50px}}@media (max-width:1192px){.container{padding:0 20px}}@media (max-width:1095px){.header__autor-list{display:none}}@media (max-width:740px){.container{padding:0 10px}}@media (max-width:700px){body{color:#fff;background-color:#000}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dG9yLmNzcyIsImF1dG9yLm1pbi5jc3MiLCJ2ZW5kb3IvcmVzZXQuc2NzcyIsImF1dG9yLnNjc3MiLCJibG9jay9oZWFkZXItYXV0b3Iuc2NzcyIsImJsb2NrL19taXhpbnMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQkEsQyxDQ0NBLEksQ0NDQSxPLENEQ0EsTyxDQWZBLE0sQ0F5REEsTyxDQzZFQSxLLENEM0RBLEssQ0F4Q0EsQyxDRG5CQSxHLENDTkEsVSxDQWJBLEksQ0E4REEsTSxDQVRBLE8sQ0FaQSxNLENDdEJJLEksQ0RFSixJLENBdUJBLEUsQ0R0QkEsRyxDQ3lDQSxPLENBeENBLEcsQ0F0QkEsRyxDQXlDQSxFLENEQ0EsRSxDRUpBLEUsQ0Z5QkEsSyxDRW9HQSxVLENEbkdBLE0sQ0FFQSxNLENBN0RBLEUsQ0FDQSxFLENBQ0EsRSxDQUNBLEUsQ0FDQSxFLENBQ0EsRSxDRHlEQSxNLENDQ0EsTSxDQXRFQSxJLENBeUNBLEMsQ0FuQ0EsTSxDQW9CQSxHLENEQ0EsRyxDQ0NBLEcsQ0F1QkEsSyxDQUNBLE0sQ0FKQSxFLENBOEJBLEksQ0MrRkEsSSxDRHJHQSxHLENBbkVBLE0sQ0M0RUEsRSxDRFJBLE0sQ0E1REEsQyxDQUVBLEcsQ0NpQ0EsQyxDRDBCQSxJLENBNUNBLEMsQ0FDQSxJLENENENBLE8sQ0MzQ0EsSyxDQTdCQSxJLENEOEJBLE0sQ0NDQSxNLENDb0JBLEcsQ0RzQkEsTyxDQXhDQSxHLENBaUJBLEssQ0FFQSxLLENES0EsRSxDQUpBLEssQ0NHQSxFLENBRkEsSyxDQzZKQSxJLENBcEZBLEUsQ0Q3RkEsRSxDQ3NDQSxDLENENUJBLEUsQ0RUQSxHLENBMENBLEssQ0NDRSxRLENDaUpGLFMsQ0QvSUUsUSxDQ2lKRSx1QixDQS9JSixRLENEbkNBLEksQ0NrTEksdUIsQ0RsTEosSSxDQ2dMQSxTLENEL0lFLFEsQ0MyS0YsQyxDRHRLRSxvQixDQUdGLE8sQ0N5TUEseUIsQ0ZyTUEsRSxDQ0NBLEUsQ0M2TUEsZSxDRnhNQSxnQixDQ0RBLGlCLENDeVBBLE8sQ0R2UEEsUSxDREdBLFksQ0NHQSxLLENDdVBJLHdCLENBQ0EsZ0IsQ0RuUEosUSxDRTdHQSxhLENGK0dFLGtCLENHMUdBLGUsQ0hrSEYsSyxDQUNBLE0sQ0FDQSxLLENFL0dDLG9CLENBRUEsZSxDSCtHRCxPLENHN0dDLGMsQ0FsQkEsTyxDQVNELG1CLENGK0hBLFEsQ0RBQSxPLENDRUUsUyxDQUdGLEksQ0RBQSxRLENDSUEsUSxDREFFLHVCLENBQ0YsWSxDS3RKQywwQixDSjJKRCxNLENEQUEsSyxDQ0VFLGtCLENBR0YsTSxDREFBLE0sQ0NFRSxtQixDQUdGLGdCLENBQ0Esb0IsQ0RBQSxjLENDSUEsZ0QsQ0FDQSw2QyxDREFBLHVCLENDSUEsd0IsQ0FDQSx1QixDREFBLFEsQ0NFRSxTLENHbktGLFksQ0FDQyxhLENBQUEsZSxDQUFBLFUsQ0FDQSxjLENIK0tELEMsQ0FFQSxPLENETkEsUSxDSXhLQSw2QixDQUNDLHFCLENBRUQsSSxDQUNDLGlFLENBQ0EsZSxDQUNBLGdCLENBQ0EsVSxDSjhLRCxjLENBQ0EsZSxDQ1FBLFUsQ0RKQyxnQixDQ01DLGEsQ0RGRixhLENDTUUsa0IsQ0RKRixpQixDQ1FBLG1CLENESkEsaUIsQ0NNRSxRLENESkYsVyxDQ1FBLFksQ0RKQyxpQixDQ01DLFMsQ0RKRixVLENDUUEsa0IsQ0RKQSxtQixDQ01FLG1CLENESkQsWSxDQ01DLHdCLENESkYscUIsQ0NNRSw2QixDREpGLGtCLENDUUEseUIsQ0RKQyxlLENDUUQsNEIsQ0RKQSw4QixDQ01FLGEsQ0RKRixpQixDQ1lBLDBCQUNFLG1CLENBQ0UsWSxBQVFKLDBCQUNFLFUsQ0FDRSxnQixBQVFKLDBCQUNFLG1CLENBQ0UsYyxBQVFKLHlCQUNFLFUsQ0FDRSxnQixBQVFKLHlCQUNFLEksQ0FDRSxVLENBQ0EsdUIiLCJmaWxlIjoiYXV0b3IubWluLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvXG4gICB2Mi4wLW1vZGlmaWVkIHwgMjAxMTAxMjZcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXG4qL1xuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbmIsIHUsIGksIGNlbnRlcixcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiAwO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbmEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5hOmhvdmVyIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG5cbm9sLCB1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBjb250ZW50OiBub25lO1xufVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICByZXNpemU6IHZlcnRpY2FsO1xufVxuXG4vKipcbiAqIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA2LzcvOC85IGFuZCBGaXJlZm94IDMuXG4gKi9cbmF1ZGlvLFxuY2FudmFzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICpkaXNwbGF5OiBpbmxpbmU7XG4gICp6b29tOiAxO1xuICBtYXgtd2lkdGg6IDEwMCU7XG59XG5cbmE6Zm9jdXMge1xuICBvdXRsaW5lOiB0aGluIGRvdHRlZDtcbn1cblxuYTphY3RpdmUsXG5hOmhvdmVyIHtcbiAgb3V0bGluZTogMDtcbn1cblxuZm9ybSB7XG4gIG1hcmdpbjogMDtcbn1cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbmJ1dHRvbixcbmlucHV0IHtcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbn1cblxuYnV0dG9uLFxuc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbmJ1dHRvbltkaXNhYmxlZF0sXG5odG1sIGlucHV0W2Rpc2FibGVkXSB7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cblxuaW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxudGV4dGFyZWEge1xuICByZXNpemU6IHZlcnRpY2FsO1xufVxuXG4uY2hyb21lZnJhbWUge1xuICBtYXJnaW46IDAuMmVtIDA7XG4gIGJhY2tncm91bmQ6ICNjY2M7XG4gIGNvbG9yOiAjMDAwO1xuICBwYWRkaW5nOiAwLjJlbSAwO1xufVxuXG4qLFxuKjo6YmVmb3JlLFxuKjo6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5ib2R5IHtcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIFwiUGx1cyBKYWthcnRhIFNhbnNcIiwgUm9ib3RvLCBzYW5zLXNlcmlmO1xuICBsaW5lLWhlaWdodDogMS41O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICBjb2xvcjogI2ZmZmZmZjtcbn1cbmJvZHkubm8tc2Nyb2xsIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICBib2R5IHtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICB9XG59XG5cbi5jb250YWluZXIge1xuICBtYXgtd2lkdGg6IDExOTJweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5AbWVkaWEgKG1heC13aWR0aDogMTE5MnB4KSB7XG4gIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDAgMjBweDtcbiAgfVxufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc0MHB4KSB7XG4gIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgfVxufVxuXG4uaGVhZGVyLWF1dG9yIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFDMUMxQztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uaGVhZGVyX19hdXRvci1saXN0IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDI2cHg7XG4gIHJpZ2h0OiAxMjRweDtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiAxMzAwcHgpIHtcbiAgLmhlYWRlcl9fYXV0b3ItbGlzdCB7XG4gICAgcmlnaHQ6IDUwcHg7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiAxMDk1cHgpIHtcbiAgLmhlYWRlcl9fYXV0b3ItbGlzdCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxufVxuXG4uaGVhZGVyX19ib3gge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTkycHg7XG4gIGxlZnQ6IDEyNHB4O1xufVxuXG4uaGVhZGVyX19hdXRvci10b3Age1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIG1hcmdpbi1ib3R0b206IDg2cHg7XG59XG5cbi5oZWFkZXJfX2F1dG9yLXRvcC0tdGl0bGUge1xuICBtYXgtd2lkdGg6IDU2LjElO1xufVxuXG4uaGVhZGVyX19hdXRvci10b3AtLXRpdGxlIGgyIHtcbiAgZm9udC1mYW1pbHk6IFwiT3BlbiBTYW5zXCI7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc2l6ZTogNzJweDtcbiAgbGluZS1oZWlnaHQ6IDExMCU7XG4gIGNvbG9yOiAjRjlGOUY5O1xuICBtYXJnaW4tcmlnaHQ6IDY0cHg7XG59XG5Ac3VwcG9ydHMgKC13ZWJraXQtYXBwZWFyYW5jZTpub25lKXtcblxufVxuXG4gQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KXtcblxuQHN1cHBvcnRzICgtd2Via2l0LWFwcGVhcmFuY2U6bm9uZSl7XG5cbn1cblxufVxuXG4gQG1lZGlhIChtYXgtd2lkdGg6IDExOTJweCl7XG5cbkBzdXBwb3J0cyAoLXdlYmtpdC1hcHBlYXJhbmNlOm5vbmUpe1xuXG59XG5cbn1cblxuIEBtZWRpYSAobWF4LXdpZHRoOiA3NDBweCl7XG5cbkBzdXBwb3J0cyAoLXdlYmtpdC1hcHBlYXJhbmNlOm5vbmUpe1xuXG59XG5cbn1cblxuIEBtZWRpYSAobWF4LXdpZHRoOiAxMzAwcHgpe1xuXG5Ac3VwcG9ydHMgKC13ZWJraXQtYXBwZWFyYW5jZTpub25lKXtcblxufVxuXG59XG5cbiBAbWVkaWEgKG1heC13aWR0aDogMTA5NXB4KXtcblxuQHN1cHBvcnRzICgtd2Via2l0LWFwcGVhcmFuY2U6bm9uZSl7XG5cbn1cblxufVxuIiwiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cbiAgIHYyLjAtbW9kaWZpZWQgfCAyMDExMDEyNlxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcbiovXG5cbmh0bWwsXG5ib2R5LFxuZGl2LFxuc3BhbixcbmFwcGxldCxcbm9iamVjdCxcbmlmcmFtZSxcbmgxLFxuaDIsXG5oMyxcbmg0LFxuaDUsXG5oNixcbnAsXG5ibG9ja3F1b3RlLFxucHJlLFxuYSxcbmFiYnIsXG5hY3JvbnltLFxuYWRkcmVzcyxcbmJpZyxcbmNpdGUsXG5jb2RlLFxuZGVsLFxuZGZuLFxuZW0sXG5pbWcsXG5pbnMsXG5rYmQsXG5xLFxucyxcbnNhbXAsXG5zbWFsbCxcbnN0cmlrZSxcbnN0cm9uZyxcbnN1YixcbnN1cCxcbnR0LFxudmFyLFxuYixcbnUsXG5pLFxuY2VudGVyLFxuZGwsXG5kdCxcbmRkLFxub2wsXG51bCxcbmxpLFxuZmllbGRzZXQsXG5mb3JtLFxubGFiZWwsXG5sZWdlbmQsXG50YWJsZSxcbmNhcHRpb24sXG50Ym9keSxcbnRmb290LFxudGhlYWQsXG50cixcbnRoLFxudGQsXG5hcnRpY2xlLFxuYXNpZGUsXG5jYW52YXMsXG5kZXRhaWxzLFxuZW1iZWQsXG5maWd1cmUsXG5maWdjYXB0aW9uLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubWVudSxcbm5hdixcbm91dHB1dCxcbnJ1YnksXG5zZWN0aW9uLFxuc3VtbWFyeSxcbnRpbWUsXG5tYXJrLFxuYXVkaW8sXG52aWRlbyB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiAwO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbmEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbmE6aG92ZXIge1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbn1cblxub2wsXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGU6YmVmb3JlLFxuYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLFxucTphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIGNvbnRlbnQ6IG5vbmU7XG59XG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XG59XG5cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIHJlc2l6ZTogdmVydGljYWw7XG59XG5cbi8qKlxuICogQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cbiAqL1xuXG5hdWRpbyxcbmNhbnZhcyxcbnZpZGVvIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAqZGlzcGxheTogaW5saW5lO1xuICAqem9vbTogMTtcbiAgbWF4LXdpZHRoOiAxMDAlO1xufVxuXG5hOmZvY3VzIHtcbiAgb3V0bGluZTogdGhpbiBkb3R0ZWQ7XG59XG5cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmU6IDA7XG59XG5cbmZvcm0ge1xuICBtYXJnaW46IDA7XG59XG5cbmZpZWxkc2V0IHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcbiAgbWFyZ2luOiAwIDJweDtcbiAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtO1xufVxuXG5idXR0b24sXG5pbnB1dCB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG59XG5cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG5idXR0b25bZGlzYWJsZWRdLFxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbmlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbnRleHRhcmVhIHtcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcbn1cblxuLmNocm9tZWZyYW1lIHtcbiAgbWFyZ2luOiAwLjJlbSAwO1xuICBiYWNrZ3JvdW5kOiAjY2NjO1xuICBjb2xvcjogIzAwMDtcbiAgcGFkZGluZzogMC4yZW0gMDtcbn1cblxuKixcbio6OmJlZm9yZSxcbio6OmFmdGVyIHtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5ib2R5IHtcbiAgZm9udDogMTRweC8xLjUgLWFwcGxlLXN5c3RlbSwgXCJQbHVzIEpha2FydGEgU2Fuc1wiLCBSb2JvdG8sIHNhbnMtc2VyaWY7XG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XG4gIG1heC13aWR0aDogMTQ0MHB4O1xuICBjb2xvcjogI2ZmZmZmZjtcbn1cblxuYm9keS5uby1zY3JvbGwge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4uY29udGFpbmVyIHtcbiAgbWF4LXdpZHRoOiAxMTkycHg7XG4gIG1hcmdpbjogMCBhdXRvO1xufVxuXG4uaGVhZGVyLWF1dG9yIHtcbiAgYmFja2dyb3VuZDogIzFDMUMxQztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4uaGVhZGVyX19hdXRvci1saXN0IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDI2cHg7XG4gIHJpZ2h0OiAxMjRweDtcbn1cblxuLmhlYWRlcl9fYm94IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDE5MnB4O1xuICBsZWZ0OiAxMjRweDtcbn1cblxuLmhlYWRlcl9fYXV0b3ItdG9wIHtcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xuICBkaXNwbGF5OiBmbGV4O1xuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xuICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIG1hcmdpbi1ib3R0b206IDg2cHg7XG59XG5cbi5oZWFkZXJfX2F1dG9yLXRvcC0tdGl0bGUge1xuICBtYXgtd2lkdGg6IDU2LjElO1xufVxuXG4uaGVhZGVyX19hdXRvci10b3AtLXRpdGxlIGgyIHtcbiAgZm9udDogNTAwIDcycHgvMTEwJSBcIk9wZW4gU2Fuc1wiO1xuICBjb2xvcjogI0Y5RjlGOTtcbiAgbWFyZ2luLXJpZ2h0OiA2NHB4O1xufVxuXG5Ac3VwcG9ydHMgKC13ZWJraXQtYXBwZWFyYW5jZTpub25lKSB7XG5cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDEzMDBweCkge1xuICAuaGVhZGVyX19hdXRvci1saXN0IHtcbiAgICByaWdodDogNTBweDtcbiAgfVxuXG5Ac3VwcG9ydHMgKC13ZWJraXQtYXBwZWFyYW5jZTpub25lKSB7XG5cbn1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDExOTJweCkge1xuICAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAwIDIwcHg7XG4gIH1cblxuQHN1cHBvcnRzICgtd2Via2l0LWFwcGVhcmFuY2U6bm9uZSkge1xuXG59XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAxMDk1cHgpIHtcbiAgLmhlYWRlcl9fYXV0b3ItbGlzdCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG5Ac3VwcG9ydHMgKC13ZWJraXQtYXBwZWFyYW5jZTpub25lKSB7XG5cbn1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDc0MHB4KSB7XG4gIC5jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgfVxuXG5Ac3VwcG9ydHMgKC13ZWJraXQtYXBwZWFyYW5jZTpub25lKSB7XG5cbn1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gIGJvZHkge1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG4gIH1cblxuQHN1cHBvcnRzICgtd2Via2l0LWFwcGVhcmFuY2U6bm9uZSkge1xuXG59XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJblpsYm1SdmNpOXlaWE5sZEM1elkzTnpJaXdpWVhWMGIzSXVZM056SWl3aVlYVjBiM0l1YzJOemN5SXNJbUpzYjJOckwxOTJZWEp6TG5OamMzTWlMQ0ppYkc5amF5OWZiV2w0YVc1ekxuTmpjM01pTENKaWJHOWpheTlvWldGa1pYSXRZWFYwYjNJdWMyTnpjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVRzN08wTkJRVUU3UVVGTFFUczdPenM3T3pzN096czdPenRGUVdGRkxGTkJRVUU3UlVGRFJDeFZRVUZCTzBWQlEwRXNVMEZCUVR0RlFVTkJMSGRDUVVGQk8wRkRRVVE3TzBGRVJVRTdSVUZEU1N4eFFrRkJRVHRCUTBOS08wRkVRVWs3UlVGRFNTd3dRa0ZCUVR0QlEwVlNPenRCUkdsQ1FUdEZRVU5ETEdkQ1FVRkJPMEZEWkVRN08wRkVjVUpCT3p0RlFVVkRMRmRCUVVFN1JVRkRRU3hoUVVGQk8wRkRiRUpFT3p0QlJIRkNRVHRGUVVORExIbENRVUZCTzBWQlEwRXNhVUpCUVVFN1FVTnNRa1E3TzBGRWNVTkJPMFZCUTBrc1kwRkJRVHRGUVVOQkxHMUNRVUZCTzBWQlEwRXNaMEpCUVVFN1FVTnNRMG83TzBGRWNVTkJPenRGUVVGQk8wRkJTVUU3T3p0RlFVZEpMSEZDUVVGQk8wZEJRMEVzWlVGQlFUdEhRVU5CTEU5QlFVRTdSVUZEUVN4bFFVRkJPMEZEYmtOS096dEJSREJGUVR0RlFVTkpMRzlDUVVGQk8wRkRka1ZLT3p0QlJEaEZRVHM3UlVGRlNTeFZRVUZCTzBGRE0wVktPenRCUkc5SFFUdEZRVU5KTEZOQlFVRTdRVU5xUjBvN08wRkVkMGRCTzBWQlEwa3NlVUpCUVVFN1JVRkRRU3hoUVVGQk8wVkJRMEVzT0VKQlFVRTdRVU55UjBvN08wRkVNa2xCT3p0RlFVVkpMRzFDUVVGQk8wRkRlRWxLT3p0QlJHdEtRVHM3UlVGRlNTeHZRa0ZCUVR0QlF5OUpTanM3UVVSNVMwRTdPMFZCUlVrc1pVRkJRVHRCUTNSTFNqczdRVVF3VFVFN08wVkJSVWtzZDBKQlFVRTdRVU4yVFVvN08wRkVPRTFCT3p0RlFVVkpMRk5CUVVFN1JVRkRRU3hWUVVGQk8wRkRNMDFLT3p0QlJIZFFRVHRGUVVOSkxHZENRVUZCTzBGRGNsQktPenRCUkhkUVFUdEZRVU5KTEdWQlFVRTdSVUZEUVN4blFrRkJRVHRGUVVOQkxGZEJRVUU3UlVGRFFTeG5Ra0ZCUVR0QlEzSlFTanM3UVVNMVIwRTdPenRGUVVkRExEaENRVUZCTzFWQlFVRXNjMEpCUVVFN1FVUXJSMFE3TzBGRE4wZEJPMFZCUTBNc2FVSkJRVUU3UlVGRFFTeGxRMmhDWjBJN1JVUnBRbWhDTEcxRlFVRkJPMFZCUTBFc1owSkJRVUU3UlVGRFFTeDVRa0ZCUVR0RlFVVkJMR05EYWtKUE8wRkdaMGxTTzBGRE4wZERPMFZCUTBNc1owSkJRVUU3UVVRclIwWTdRVU5zU1VNN1JVRlRSRHRKUVdWRkxGZEJRVUU3U1VGRFFTeHpRa0ZCUVR0RlJEaEhRVHRCUVVOR096dEJRelZIUVR0RlFVTkRMR2xDUVVGQk8wVkJRMEVzWTBGQlFUdEJSQ3RIUkR0QlIycEtRenRGUm1kRFJEdEpRVXRGTEdWQlFVRTdSVVJuU0VFN1FVRkRSanRCUjNSS1F6dEZSbWREUkR0SlFWRkZMR1ZCUVVFN1JVUnJTRUU3UVVGRFJqczdRVU5vU0VFN1JVRkRReXg1UWtOd1EwMDdSVVJ4UTA0c2EwSkJRVUU3UVVSdFNFUTdPMEZKYWt0Qk8wVkJRME1zYTBKQlFVRTdSVUZEUVN4VFFVRkJPMFZCUTBFc1dVRkJRVHRCU205TFJEdEJSM1JMUXp0RlEwUkVPMGxCUzBVc1YwRkJRVHRGU25OTFFUdEJRVU5HTzBGSE0wdERPMFZEUkVRN1NVRlJSU3hoUVVGQk8wVktkMHRCTzBGQlEwWTdPMEZKZEV0Qk8wVkJRMFVzYTBKQlFVRTdSVUZEUVN4VlFVRkJPMFZCUTBFc1YwRkJRVHRCU25sTFJqczdRVWwyUzBFN1JVRkRReXh2UWtGQlFUdEZRVUZCTEc5Q1FVRkJPMFZCUVVFc1lVRkJRVHRGUVVOQkxIbENRVUZCTzAxQlFVRXNjMEpCUVVFN1ZVRkJRU3c0UWtGQlFUdEZRVU5CTEcxQ1FVRkJPMEZLTUV0RU96dEJTWGhMUVR0RlFVTkRMR2RDUVVGQk8wRktNa3RFT3p0QlNYcExRVHRGUVVORExIZENRVUZCTzBWQlEwRXNaMEpCUVVFN1JVRkRRU3hsUVVGQk8wVkJRMEVzYVVKQlFVRTdSVUZEUVN4alFVRkJPMFZCUTBFc2EwSkJRVUU3UVVvMFMwUTdRVUZEUVRzN1FVRkZRVHM3UTBGRlF6czdRVUZGUkRzN1FVRkZRVHM3UVVGRlFUczdRMEZGUXpzN1FVRkZSRHM3UVVGRlFUczdRVUZGUVRzN1EwRkZRenM3UVVGRlJEczdRVUZGUVRzN1FVRkZRVHM3UTBGRlF6czdRVUZGUkRzN1FVRkZRVHM3UVVGRlFUczdRMEZGUXpzN1FVRkZSRHM3UVVGRlFUczdRVUZGUVNJc0ltWnBiR1VpT2lKaGRYUnZjaTVqYzNNaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaUJvZEhSd09pOHZiV1Y1WlhKM1pXSXVZMjl0TDJWeWFXTXZkRzl2YkhNdlkzTnpMM0psYzJWMEwxeHVJQ0FnZGpJdU1DMXRiMlJwWm1sbFpDQjhJREl3TVRFd01USTJYRzRnSUNCTWFXTmxibk5sT2lCdWIyNWxJQ2h3ZFdKc2FXTWdaRzl0WVdsdUtWeHVLaTljYmx4dWFIUnRiQ3dnWW05a2VTd2daR2wyTENCemNHRnVMQ0JoY0hCc1pYUXNJRzlpYW1WamRDd2dhV1p5WVcxbExGeHVhREVzSUdneUxDQm9NeXdnYURRc0lHZzFMQ0JvTml3Z2NDd2dZbXh2WTJ0eGRXOTBaU3dnY0hKbExGeHVZU3dnWVdKaWNpd2dZV055YjI1NWJTd2dZV1JrY21WemN5d2dZbWxuTENCamFYUmxMQ0JqYjJSbExGeHVaR1ZzTENCa1ptNHNJR1Z0TENCcGJXY3NJR2x1Y3l3Z2EySmtMQ0J4TENCekxDQnpZVzF3TEZ4dWMyMWhiR3dzSUhOMGNtbHJaU3dnYzNSeWIyNW5MQ0J6ZFdJc0lITjFjQ3dnZEhRc0lIWmhjaXhjYm1Jc0lIVXNJR2tzSUdObGJuUmxjaXhjYm1Sc0xDQmtkQ3dnWkdRc0lHOXNMQ0IxYkN3Z2JHa3NYRzVtYVdWc1pITmxkQ3dnWm05eWJTd2diR0ZpWld3c0lHeGxaMlZ1WkN4Y2JuUmhZbXhsTENCallYQjBhVzl1TENCMFltOWtlU3dnZEdadmIzUXNJSFJvWldGa0xDQjBjaXdnZEdnc0lIUmtMRnh1WVhKMGFXTnNaU3dnWVhOcFpHVXNJR05oYm5aaGN5d2daR1YwWVdsc2N5d2daVzFpWldRc1hHNW1hV2QxY21Vc0lHWnBaMk5oY0hScGIyNHNJR1p2YjNSbGNpd2dhR1ZoWkdWeUxDQm9aM0p2ZFhBc1hHNXRaVzUxTENCdVlYWXNJRzkxZEhCMWRDd2djblZpZVN3Z2MyVmpkR2x2Yml3Z2MzVnRiV0Z5ZVN4Y2JuUnBiV1VzSUcxaGNtc3NJR0YxWkdsdkxDQjJhV1JsYnlCN1hHNGdJRzFoY21kcGJqb2dNRHRjYmx4MGNHRmtaR2x1WnpvZ01EdGNibHgwWW05eVpHVnlPaUF3TzF4dVhIUjJaWEowYVdOaGJDMWhiR2xuYmpvZ1ltRnpaV3hwYm1VN1hHNTlYRzVoSUh0Y2JpQWdJQ0IwWlhoMExXUmxZMjl5WVhScGIyNDZJRzV2Ym1VN1hHNGdJQ0FnSmpwb2IzWmxjaUI3WEc0Z0lDQWdJQ0FnSUhSbGVIUXRaR1ZqYjNKaGRHbHZiam9nZFc1a1pYSnNhVzVsTzF4dUlDQWdJSDFjYm4xY2JseHVMeThnTHlvZ2JXRnJaU0J6ZFhKbElIUnZJSE5sZENCemIyMWxJR1p2WTNWeklITjBlV3hsY3lCbWIzSWdZV05qWlhOemFXSnBiR2wwZVNBcUwxeHVMeThnT21adlkzVnpJSHRjYmk4dklDQWdJQ0J2ZFhSc2FXNWxPaUF3TzF4dUx5OGdmVnh1WEc0dkx5QXZLaUJJVkUxTU5TQmthWE53YkdGNUxYSnZiR1VnY21WelpYUWdabTl5SUc5c1pHVnlJR0p5YjNkelpYSnpJQ292WEc0dkx5QmhjblJwWTJ4bExDQmhjMmxrWlN3Z1pHVjBZV2xzY3l3Z1ptbG5ZMkZ3ZEdsdmJpd2dabWxuZFhKbExGeHVMeThnWm05dmRHVnlMQ0JvWldGa1pYSXNJR2huY205MWNDd2diV1Z1ZFN3Z2JtRjJMQ0J6WldOMGFXOXVJSHRjYmk4dklGeDBaR2x6Y0d4aGVUb2dZbXh2WTJzN1hHNHZMeUI5WEc1Y2JpOHZJR0p2WkhrZ2UxeHVMeThnWEhSc2FXNWxMV2hsYVdkb2REb2dNVHRjYmk4dklIMWNibHh1YjJ3c0lIVnNJSHRjYmx4MGJHbHpkQzF6ZEhsc1pUb2dibTl1WlR0Y2JuMWNibHh1THk4Z1lteHZZMnR4ZFc5MFpTd2djU0I3WEc0dkx5QmNkSEYxYjNSbGN6b2dibTl1WlR0Y2JpOHZJSDFjYmx4dVlteHZZMnR4ZFc5MFpUcGlaV1p2Y21Vc0lHSnNiMk5yY1hWdmRHVTZZV1owWlhJc1hHNXhPbUpsWm05eVpTd2djVHBoWm5SbGNpQjdYRzVjZEdOdmJuUmxiblE2SUNjbk8xeHVYSFJqYjI1MFpXNTBPaUJ1YjI1bE8xeHVmVnh1WEc1MFlXSnNaU0I3WEc1Y2RHSnZjbVJsY2kxamIyeHNZWEJ6WlRvZ1kyOXNiR0Z3YzJVN1hHNWNkR0p2Y21SbGNpMXpjR0ZqYVc1bk9pQXdPMXh1ZlZ4dVhHNHZMeUJwYm5CMWRGdDBlWEJsUFhObFlYSmphRjA2T2kxM1pXSnJhWFF0YzJWaGNtTm9MV05oYm1ObGJDMWlkWFIwYjI0c1hHNHZMeUJwYm5CMWRGdDBlWEJsUFhObFlYSmphRjA2T2kxM1pXSnJhWFF0YzJWaGNtTm9MV1JsWTI5eVlYUnBiMjRzWEc0dkx5QnBibkIxZEZ0MGVYQmxQWE5sWVhKamFGMDZPaTEzWldKcmFYUXRjMlZoY21Ob0xYSmxjM1ZzZEhNdFluVjBkRzl1TEZ4dUx5OGdhVzV3ZFhSYmRIbHdaVDF6WldGeVkyaGRPam90ZDJWaWEybDBMWE5sWVhKamFDMXlaWE4xYkhSekxXUmxZMjl5WVhScGIyNGdlMXh1THk4Z0lDQWdJQzEzWldKcmFYUXRZWEJ3WldGeVlXNWpaVG9nYm05dVpUdGNiaTh2SUNBZ0lDQXRiVzk2TFdGd2NHVmhjbUZ1WTJVNklHNXZibVU3WEc0dkx5QjlYRzVjYmk4dklHbHVjSFYwVzNSNWNHVTljMlZoY21Ob1hTQjdYRzR2THlBZ0lDQWdMWGRsWW10cGRDMWhjSEJsWVhKaGJtTmxPaUJ1YjI1bE8xeHVMeThnSUNBZ0lDMXRiM290WVhCd1pXRnlZVzVqWlRvZ2JtOXVaVHRjYmk4dklDQWdJQ0F0ZDJWaWEybDBMV0p2ZUMxemFYcHBibWM2SUdOdmJuUmxiblF0WW05NE8xeHVMeThnSUNBZ0lDMXRiM290WW05NExYTnBlbWx1WnpvZ1kyOXVkR1Z1ZEMxaWIzZzdYRzR2THlBZ0lDQWdZbTk0TFhOcGVtbHVaem9nWTI5dWRHVnVkQzFpYjNnN1hHNHZMeUI5WEc1Y2JuUmxlSFJoY21WaElIdGNiaUFnSUNCdmRtVnlabXh2ZHpvZ1lYVjBienRjYmlBZ0lDQjJaWEowYVdOaGJDMWhiR2xuYmpvZ2RHOXdPMXh1SUNBZ0lISmxjMmw2WlRvZ2RtVnlkR2xqWVd3N1hHNTlYRzVjYmk4cUtseHVJQ29nUTI5eWNtVmpkQ0JnYVc1c2FXNWxMV0pzYjJOcllDQmthWE53YkdGNUlHNXZkQ0JrWldacGJtVmtJR2x1SUVsRklEWXZOeTg0THprZ1lXNWtJRVpwY21WbWIzZ2dNeTVjYmlBcUwxeHVYRzVoZFdScGJ5eGNibU5oYm5aaGN5eGNiblpwWkdWdklIdGNiaUFnSUNCa2FYTndiR0Y1T2lCcGJteHBibVV0WW14dlkyczdYRzRnSUNBZ0ttUnBjM0JzWVhrNklHbHViR2x1WlR0Y2JpQWdJQ0FxZW05dmJUb2dNVHRjYmlBZ0lDQnRZWGd0ZDJsa2RHZzZJREV3TUNVN1hHNTlYRzVjYmk4dklDOHFLbHh1THk4Z0lDb2dVSEpsZG1WdWRDQnRiMlJsY200Z1luSnZkM05sY25NZ1puSnZiU0JrYVhOd2JHRjVhVzVuSUdCaGRXUnBiMkFnZDJsMGFHOTFkQ0JqYjI1MGNtOXNjeTVjYmk4dklDQXFJRkpsYlc5MlpTQmxlR05sYzNNZ2FHVnBaMmgwSUdsdUlHbFBVeUExSUdSbGRtbGpaWE11WEc0dkx5QWdLaTljYmx4dUx5OGdZWFZrYVc4NmJtOTBLRnRqYjI1MGNtOXNjMTBwSUh0Y2JpOHZJQ0FnSUNCa2FYTndiR0Y1T2lCdWIyNWxPMXh1THk4Z0lDQWdJR2hsYVdkb2REb2dNRHRjYmk4dklIMWNibHh1THk4Z0x5b3FYRzR2THlBZ0tpQkJaR1J5WlhOeklITjBlV3hwYm1jZ2JtOTBJSEJ5WlhObGJuUWdhVzRnU1VVZ055ODRMemtzSUVacGNtVm1iM2dnTXl3Z1lXNWtJRk5oWm1GeWFTQTBMbHh1THk4Z0lDb2dTMjV2ZDI0Z2FYTnpkV1U2SUc1dklFbEZJRFlnYzNWd2NHOXlkQzVjYmk4dklDQXFMMXh1WEc0dkx5QmJhR2xrWkdWdVhTQjdYRzR2THlBZ0lDQWdaR2x6Y0d4aGVUb2dibTl1WlR0Y2JpOHZJSDFjYmx4dUx5OGdMeW9xWEc0dkx5QWdLaUF4TGlCRGIzSnlaV04wSUhSbGVIUWdjbVZ6YVhwcGJtY2diMlJrYkhrZ2FXNGdTVVVnTmk4M0lIZG9aVzRnWW05a2VTQmdabTl1ZEMxemFYcGxZQ0JwY3lCelpYUWdkWE5wYm1kY2JpOHZJQ0FxSUNBZ0lHQmxiV0FnZFc1cGRITXVYRzR2THlBZ0tpQXlMaUJRY21WMlpXNTBJR2xQVXlCMFpYaDBJSE5wZW1VZ1lXUnFkWE4wSUdGbWRHVnlJRzl5YVdWdWRHRjBhVzl1SUdOb1lXNW5aU3dnZDJsMGFHOTFkQ0JrYVhOaFlteHBibWRjYmk4dklDQXFJQ0FnSUhWelpYSWdlbTl2YlM1Y2JpOHZJQ0FxTDF4dVhHNHZMeUJvZEcxc0lIdGNiaTh2SUNBZ0lDQm1iMjUwTFhOcGVtVTZJREV3TUNVN0lDOHFJREVnS2k5Y2JpOHZJQ0FnSUNBdGQyVmlhMmwwTFhSbGVIUXRjMmw2WlMxaFpHcDFjM1E2SURFd01DVTdJQzhxSURJZ0tpOWNiaTh2SUNBZ0lDQXRiWE10ZEdWNGRDMXphWHBsTFdGa2FuVnpkRG9nTVRBd0pUc2dMeW9nTWlBcUwxeHVMeThnZlZ4dVhHNHZMeUF2S2lwY2JpOHZJQ0FxSUVGa1pISmxjM01nWUc5MWRHeHBibVZnSUdsdVkyOXVjMmx6ZEdWdVkza2dZbVYwZDJWbGJpQkRhSEp2YldVZ1lXNWtJRzkwYUdWeUlHSnliM2R6WlhKekxseHVMeThnSUNvdlhHNWNibUU2Wm05amRYTWdlMXh1SUNBZ0lHOTFkR3hwYm1VNklIUm9hVzRnWkc5MGRHVmtPMXh1ZlZ4dVhHNHZMeUF2S2lwY2JpOHZJQ0FxSUVsdGNISnZkbVVnY21WaFpHRmlhV3hwZEhrZ2QyaGxiaUJtYjJOMWMyVmtJR0Z1WkNCaGJITnZJRzF2ZFhObElHaHZkbVZ5WldRZ2FXNGdZV3hzSUdKeWIzZHpaWEp6TGx4dUx5OGdJQ292WEc1Y2JtRTZZV04wYVhabExGeHVZVHBvYjNabGNpQjdYRzRnSUNBZ2IzVjBiR2x1WlRvZ01EdGNibjFjYmx4dUx5OGdMeW9xWEc0dkx5QWdLaUF4TGlCU1pXMXZkbVVnWW05eVpHVnlJSGRvWlc0Z2FXNXphV1JsSUdCaFlDQmxiR1Z0Wlc1MElHbHVJRWxGSURZdk55ODRMemtnWVc1a0lFWnBjbVZtYjNnZ015NWNiaTh2SUNBcUlESXVJRWx0Y0hKdmRtVWdhVzFoWjJVZ2NYVmhiR2wwZVNCM2FHVnVJSE5qWVd4bFpDQnBiaUJKUlNBM0xseHVMeThnSUNvdlhHNWNiaTh2SUdsdFp5QjdYRzR2THlBZ0lDQWdZbTl5WkdWeU9pQXdPeUF2S2lBeElDb3ZYRzR2THlBZ0lDQWdMVzF6TFdsdWRHVnljRzlzWVhScGIyNHRiVzlrWlRvZ1ltbGpkV0pwWXpzZ0x5b2dNaUFxTDF4dUx5OGdmVnh1WEc0dkx5QXZLaXBjYmk4dklDQXFJRUZrWkhKbGMzTWdiV0Z5WjJsdUlHNXZkQ0J3Y21WelpXNTBJR2x1SUVsRklEWXZOeTg0THprc0lGTmhabUZ5YVNBMUxDQmhibVFnVDNCbGNtRWdNVEV1WEc0dkx5QWdLaTljYmx4dUx5OGdabWxuZFhKbElIdGNiaTh2SUNBZ0lDQnRZWEpuYVc0NklEQTdYRzR2THlCOVhHNWNiaTh2SUM4cUtseHVMeThnSUNvZ1EyOXljbVZqZENCdFlYSm5hVzRnWkdsemNHeGhlV1ZrSUc5a1pHeDVJR2x1SUVsRklEWXZOeTVjYmk4dklDQXFMMXh1WEc1bWIzSnRJSHRjYmlBZ0lDQnRZWEpuYVc0NklEQTdYRzU5WEc1Y2JpOHZJQzhxS2x4dUx5OGdJQ29nUkdWbWFXNWxJR052Ym5OcGMzUmxiblFnWW05eVpHVnlMQ0J0WVhKbmFXNHNJR0Z1WkNCd1lXUmthVzVuTGx4dUx5OGdJQ292WEc1Y2JtWnBaV3hrYzJWMElIdGNiaUFnSUNCaWIzSmtaWEk2SURGd2VDQnpiMnhwWkNBall6QmpNR013TzF4dUlDQWdJRzFoY21kcGJqb2dNQ0F5Y0hnN1hHNGdJQ0FnY0dGa1pHbHVaem9nTUM0ek5XVnRJREF1TmpJMVpXMGdNQzQzTldWdE8xeHVmVnh1WEc0dkx5QXZLaXBjYmk4dklDQXFJREV1SUVOdmNuSmxZM1FnWTI5c2IzSWdibTkwSUdKbGFXNW5JR2x1YUdWeWFYUmxaQ0JwYmlCSlJTQTJMemN2T0M4NUxseHVMeThnSUNvZ01pNGdRMjl5Y21WamRDQjBaWGgwSUc1dmRDQjNjbUZ3Y0dsdVp5QnBiaUJHYVhKbFptOTRJRE11WEc0dkx5QWdLaUF6TGlCRGIzSnlaV04wSUdGc2FXZHViV1Z1ZENCa2FYTndiR0Y1WldRZ2IyUmtiSGtnYVc0Z1NVVWdOaTgzTGx4dUx5OGdJQ292WEc1Y2JpOHZJR3hsWjJWdVpDQjdYRzR2THlBZ0lDQWdZbTl5WkdWeU9pQXdPeUF2S2lBeElDb3ZYRzR2THlBZ0lDQWdjR0ZrWkdsdVp6b2dNRHRjYmk4dklDQWdJQ0IzYUdsMFpTMXpjR0ZqWlRvZ2JtOXliV0ZzT3lBdktpQXlJQ292WEc0dkx5QWdJQ0FnS20xaGNtZHBiaTFzWldaME9pQXROM0I0T3lBdktpQXpJQ292WEc0dkx5QjlYRzVjYmk4dklDOHFLbHh1THk4Z0lDb2dNUzRnUTI5eWNtVmpkQ0JtYjI1MElITnBlbVVnYm05MElHSmxhVzVuSUdsdWFHVnlhWFJsWkNCcGJpQmhiR3dnWW5KdmQzTmxjbk11WEc0dkx5QWdLaUF5TGlCQlpHUnlaWE56SUcxaGNtZHBibk1nYzJWMElHUnBabVpsY21WdWRHeDVJR2x1SUVsRklEWXZOeXdnUm1seVpXWnZlQ0F6S3l3Z1UyRm1ZWEpwSURVc1hHNHZMeUFnS2lBZ0lDQmhibVFnUTJoeWIyMWxMbHh1THk4Z0lDb2dNeTRnU1cxd2NtOTJaU0JoY0hCbFlYSmhibU5sSUdGdVpDQmpiMjV6YVhOMFpXNWplU0JwYmlCaGJHd2dZbkp2ZDNObGNuTXVYRzR2THlBZ0tpOWNibHh1THk4Z1luVjBkRzl1TEZ4dUx5OGdhVzV3ZFhRc1hHNHZMeUJ6Wld4bFkzUXNYRzR2THlCMFpYaDBZWEpsWVNCN1hHNHZMeUFnSUNBZ1ptOXVkQzF6YVhwbE9pQXhNREFsT3lBdktpQXhJQ292WEc0dkx5QWdJQ0FnYldGeVoybHVPaUF3T3lBdktpQXlJQ292WEc0dkx5QWdJQ0FnZG1WeWRHbGpZV3d0WVd4cFoyNDZJR0poYzJWc2FXNWxPeUF2S2lBeklDb3ZYRzR2THlBZ0lDQWdLblpsY25ScFkyRnNMV0ZzYVdkdU9pQnRhV1JrYkdVN0lDOHFJRE1nS2k5Y2JpOHZJSDFjYmx4dUx5OGdMeW9xWEc0dkx5QWdLaUJCWkdSeVpYTnpJRVpwY21WbWIzZ2dNeXNnYzJWMGRHbHVaeUJnYkdsdVpTMW9aV2xuYUhSZ0lHOXVJR0JwYm5CMWRHQWdkWE5wYm1jZ1lDRnBiWEJ2Y25SaGJuUmdJR2x1WEc0dkx5QWdLaUIwYUdVZ1ZVRWdjM1I1YkdWemFHVmxkQzVjYmk4dklDQXFMMXh1WEc1aWRYUjBiMjRzWEc1cGJuQjFkQ0I3WEc0Z0lDQWdiR2x1WlMxb1pXbG5hSFE2SUc1dmNtMWhiRHRjYm4xY2JseHVMeThnTHlvcVhHNHZMeUFnS2lCQlpHUnlaWE56SUdsdVkyOXVjMmx6ZEdWdWRDQmdkR1Y0ZEMxMGNtRnVjMlp2Y20xZ0lHbHVhR1Z5YVhSaGJtTmxJR1p2Y2lCZ1luVjBkRzl1WUNCaGJtUWdZSE5sYkdWamRHQXVYRzR2THlBZ0tpQkJiR3dnYjNSb1pYSWdabTl5YlNCamIyNTBjbTlzSUdWc1pXMWxiblJ6SUdSdklHNXZkQ0JwYm1obGNtbDBJR0IwWlhoMExYUnlZVzV6Wm05eWJXQWdkbUZzZFdWekxseHVMeThnSUNvZ1EyOXljbVZqZENCZ1luVjBkRzl1WUNCemRIbHNaU0JwYm1obGNtbDBZVzVqWlNCcGJpQkRhSEp2YldVc0lGTmhabUZ5YVNBMUt5d2dZVzVrSUVsRklEWXJMbHh1THk4Z0lDb2dRMjl5Y21WamRDQmdjMlZzWldOMFlDQnpkSGxzWlNCcGJtaGxjbWwwWVc1alpTQnBiaUJHYVhKbFptOTRJRFFySUdGdVpDQlBjR1Z5WVM1Y2JpOHZJQ0FxTDF4dVhHNWlkWFIwYjI0c1hHNXpaV3hsWTNRZ2UxeHVJQ0FnSUhSbGVIUXRkSEpoYm5ObWIzSnRPaUJ1YjI1bE8xeHVmVnh1WEc0dkx5QXZLaXBjYmk4dklDQXFJREV1SUVGMmIybGtJSFJvWlNCWFpXSkxhWFFnWW5WbklHbHVJRUZ1WkhKdmFXUWdOQzR3TGlvZ2QyaGxjbVVnS0RJcElHUmxjM1J5YjNseklHNWhkR2wyWlNCZ1lYVmthVzlnWEc0dkx5QWdLaUFnSUNCaGJtUWdZSFpwWkdWdllDQmpiMjUwY205c2N5NWNiaTh2SUNBcUlESXVJRU52Y25KbFkzUWdhVzVoWW1sc2FYUjVJSFJ2SUhOMGVXeGxJR05zYVdOcllXSnNaU0JnYVc1d2RYUmdJSFI1Y0dWeklHbHVJR2xQVXk1Y2JpOHZJQ0FxSURNdUlFbHRjSEp2ZG1VZ2RYTmhZbWxzYVhSNUlHRnVaQ0JqYjI1emFYTjBaVzVqZVNCdlppQmpkWEp6YjNJZ2MzUjViR1VnWW1WMGQyVmxiaUJwYldGblpTMTBlWEJsWEc0dkx5QWdLaUFnSUNCZ2FXNXdkWFJnSUdGdVpDQnZkR2hsY25NdVhHNHZMeUFnS2lBMExpQlNaVzF2ZG1VZ2FXNXVaWElnYzNCaFkybHVaeUJwYmlCSlJTQTNJSGRwZEdodmRYUWdZV1ptWldOMGFXNW5JRzV2Y20xaGJDQjBaWGgwSUdsdWNIVjBjeTVjYmk4dklDQXFJQ0FnSUV0dWIzZHVJR2x6YzNWbE9pQnBibTVsY2lCemNHRmphVzVuSUhKbGJXRnBibk1nYVc0Z1NVVWdOaTVjYmk4dklDQXFMMXh1WEc0dkx5QmlkWFIwYjI0c1hHNHZMeUJvZEcxc0lHbHVjSFYwVzNSNWNHVTlYQ0ppZFhSMGIyNWNJbDBzSUM4cUlERWdLaTljYmk4dklHbHVjSFYwVzNSNWNHVTlYQ0p5WlhObGRGd2lYU3hjYmk4dklHbHVjSFYwVzNSNWNHVTlYQ0p6ZFdKdGFYUmNJbDBnZTF4dUx5OGdJQ0FnSUMxM1pXSnJhWFF0WVhCd1pXRnlZVzVqWlRvZ1luVjBkRzl1T3lBdktpQXlJQ292WEc0dkx5QWdJQ0FnWTNWeWMyOXlPaUJ3YjJsdWRHVnlPeUF2S2lBeklDb3ZYRzR2THlBZ0lDQWdLbTkyWlhKbWJHOTNPaUIyYVhOcFlteGxPeUFnTHlvZ05DQXFMMXh1THk4Z2ZWeHVYRzR2THlBdktpcGNiaTh2SUNBcUlGSmxMWE5sZENCa1pXWmhkV3gwSUdOMWNuTnZjaUJtYjNJZ1pHbHpZV0pzWldRZ1pXeGxiV1Z1ZEhNdVhHNHZMeUFnS2k5Y2JseHVZblYwZEc5dVcyUnBjMkZpYkdWa1hTeGNibWgwYld3Z2FXNXdkWFJiWkdsellXSnNaV1JkSUh0Y2JpQWdJQ0JqZFhKemIzSTZJR1JsWm1GMWJIUTdYRzU5WEc1Y2JpOHZJQzhxS2x4dUx5OGdJQ29nTVM0Z1FXUmtjbVZ6Y3lCaWIzZ2djMmw2YVc1bklITmxkQ0IwYnlCamIyNTBaVzUwTFdKdmVDQnBiaUJKUlNBNEx6a3VYRzR2THlBZ0tpQXlMaUJTWlcxdmRtVWdaWGhqWlhOeklIQmhaR1JwYm1jZ2FXNGdTVVVnT0M4NUxseHVMeThnSUNvZ015NGdVbVZ0YjNabElHVjRZMlZ6Y3lCd1lXUmthVzVuSUdsdUlFbEZJRGN1WEc0dkx5QWdLaUFnSUNCTGJtOTNiaUJwYzNOMVpUb2daWGhqWlhOeklIQmhaR1JwYm1jZ2NtVnRZV2x1Y3lCcGJpQkpSU0EyTGx4dUx5OGdJQ292WEc1Y2JpOHZJR2x1Y0hWMFczUjVjR1U5WENKamFHVmphMkp2ZUZ3aVhTeGNiaTh2SUdsdWNIVjBXM1I1Y0dVOVhDSnlZV1JwYjF3aVhTQjdYRzR2THlBZ0lDQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZURzZ0x5b2dNU0FxTDF4dUx5OGdJQ0FnSUhCaFpHUnBibWM2SURBN0lDOHFJRElnS2k5Y2JpOHZJQ0FnSUNBcWFHVnBaMmgwT2lBeE0zQjRPeUF2S2lBeklDb3ZYRzR2THlBZ0lDQWdLbmRwWkhSb09pQXhNM0I0T3lBdktpQXpJQ292WEc0dkx5QjlYRzVjYmk4dklDOHFLbHh1THk4Z0lDb2dNUzRnUVdSa2NtVnpjeUJnWVhCd1pXRnlZVzVqWldBZ2MyVjBJSFJ2SUdCelpXRnlZMmhtYVdWc1pHQWdhVzRnVTJGbVlYSnBJRFVnWVc1a0lFTm9jbTl0WlM1Y2JpOHZJQ0FxSURJdUlFRmtaSEpsYzNNZ1lHSnZlQzF6YVhwcGJtZGdJSE5sZENCMGJ5QmdZbTl5WkdWeUxXSnZlR0FnYVc0Z1UyRm1ZWEpwSURVZ1lXNWtJRU5vY205dFpWeHVMeThnSUNvZ0lDQWdLR2x1WTJ4MVpHVWdZQzF0YjNwZ0lIUnZJR1oxZEhWeVpTMXdjbTl2WmlrdVhHNHZMeUFnS2k5Y2JseHVMeThnYVc1d2RYUmJkSGx3WlQxY0luTmxZWEpqYUZ3aVhTQjdYRzR2THlBZ0lDQWdMWGRsWW10cGRDMWhjSEJsWVhKaGJtTmxPaUIwWlhoMFptbGxiR1E3SUM4cUlERWdLaTljYmk4dklDQWdJQ0F0Ylc5NkxXSnZlQzF6YVhwcGJtYzZJR052Ym5SbGJuUXRZbTk0TzF4dUx5OGdJQ0FnSUMxM1pXSnJhWFF0WW05NExYTnBlbWx1WnpvZ1kyOXVkR1Z1ZEMxaWIzZzdJQzhxSURJZ0tpOWNiaTh2SUNBZ0lDQmliM2d0YzJsNmFXNW5PaUJqYjI1MFpXNTBMV0p2ZUR0Y2JpOHZJSDFjYmx4dUx5OGdMeW9xWEc0dkx5QWdLaUJTWlcxdmRtVWdhVzV1WlhJZ2NHRmtaR2x1WnlCaGJtUWdjMlZoY21Ob0lHTmhibU5sYkNCaWRYUjBiMjRnYVc0Z1UyRm1ZWEpwSURVZ1lXNWtJRU5vY205dFpWeHVMeThnSUNvZ2IyNGdUMU1nV0M1Y2JpOHZJQ0FxTDF4dVhHNXBibkIxZEZ0MGVYQmxQVndpYzJWaGNtTm9YQ0pkT2pvdGQyVmlhMmwwTFhObFlYSmphQzFqWVc1alpXd3RZblYwZEc5dUxGeHVhVzV3ZFhSYmRIbHdaVDFjSW5ObFlYSmphRndpWFRvNkxYZGxZbXRwZEMxelpXRnlZMmd0WkdWamIzSmhkR2x2YmlCN1hHNGdJQ0FnTFhkbFltdHBkQzFoY0hCbFlYSmhibU5sT2lCdWIyNWxPMXh1ZlZ4dVhHNHZMeUF2S2lwY2JpOHZJQ0FxSUZKbGJXOTJaU0JwYm01bGNpQndZV1JrYVc1bklHRnVaQ0JpYjNKa1pYSWdhVzRnUm1seVpXWnZlQ0F6S3k1Y2JpOHZJQ0FxTDF4dVhHNWlkWFIwYjI0Nk9pMXRiM290Wm05amRYTXRhVzV1WlhJc1hHNXBibkIxZERvNkxXMXZlaTFtYjJOMWN5MXBibTVsY2lCN1hHNGdJQ0FnWW05eVpHVnlPaUF3TzF4dUlDQWdJSEJoWkdScGJtYzZJREE3WEc1OVhHNWNiaTh2SUM4cUtseHVMeThnSUNvZ01TNGdVbVZ0YjNabElHUmxabUYxYkhRZ2RtVnlkR2xqWVd3Z2MyTnliMnhzWW1GeUlHbHVJRWxGSURZdk55ODRMemt1WEc0dkx5QWdLaUF5TGlCSmJYQnliM1psSUhKbFlXUmhZbWxzYVhSNUlHRnVaQ0JoYkdsbmJtMWxiblFnYVc0Z1lXeHNJR0p5YjNkelpYSnpMbHh1THk4Z0lDb3ZYRzVjYmk4dklIUmxlSFJoY21WaElIdGNiaTh2SUNBZ0lDQnZkbVZ5Wm14dmR6b2dZWFYwYnpzZ0x5b2dNU0FxTDF4dUx5OGdJQ0FnSUhabGNuUnBZMkZzTFdGc2FXZHVPaUIwYjNBN0lDOHFJRElnS2k5Y2JpOHZJSDFjYmx4dUx5OGdMeW9xWEc0dkx5QWdLaUJTWlcxdmRtVWdiVzl6ZENCemNHRmphVzVuSUdKbGRIZGxaVzRnZEdGaWJHVWdZMlZzYkhNdVhHNHZMeUFnS2k5Y2JseHVMeThnZEdGaWJHVWdlMXh1THk4Z0lDQWdJR0p2Y21SbGNpMWpiMnhzWVhCelpUb2dZMjlzYkdGd2MyVTdYRzR2THlBZ0lDQWdZbTl5WkdWeUxYTndZV05wYm1jNklEQTdYRzR2THlCOVhHNWNibHh1WEc1Y2JpOHZJRG82TFcxdmVpMXpaV3hsWTNScGIyNGdlMXh1THk4Z0lDQWdJR0poWTJ0bmNtOTFibVE2SUNOaU0yUTBabU03WEc0dkx5QWdJQ0FnZEdWNGRDMXphR0ZrYjNjNklHNXZibVU3WEc0dkx5QjlYRzVjYmk4dklEbzZjMlZzWldOMGFXOXVJSHRjYmk4dklDQWdJQ0JpWVdOclozSnZkVzVrT2lBallqTmtOR1pqTzF4dUx5OGdJQ0FnSUhSbGVIUXRjMmhoWkc5M09pQnViMjVsTzF4dUx5OGdmVnh1WEc0dkx5QnBiV2NnZTF4dUx5OGdJQ0FnSUhabGNuUnBZMkZzTFdGc2FXZHVPaUJ0YVdSa2JHVTdYRzR2THlCOVhHNWNiaTh2SUdacFpXeGtjMlYwSUh0Y2JpOHZJQ0FnSUNCaWIzSmtaWEk2SURBN1hHNHZMeUFnSUNBZ2JXRnlaMmx1T2lBd08xeHVMeThnSUNBZ0lIQmhaR1JwYm1jNklEQTdYRzR2THlCOVhHNWNiblJsZUhSaGNtVmhJSHRjYmlBZ0lDQnlaWE5wZW1VNklIWmxjblJwWTJGc08xeHVmVnh1WEc0dVkyaHliMjFsWm5KaGJXVWdlMXh1SUNBZ0lHMWhjbWRwYmpvZ01DNHlaVzBnTUR0Y2JpQWdJQ0JpWVdOclozSnZkVzVrT2lBalkyTmpPMXh1SUNBZ0lHTnZiRzl5T2lBak1EQXdPMXh1SUNBZ0lIQmhaR1JwYm1jNklEQXVNbVZ0SURBN1hHNTlYRzVjYmlJc0lpOHFJR2gwZEhBNkx5OXRaWGxsY25kbFlpNWpiMjB2WlhKcFl5OTBiMjlzY3k5amMzTXZjbVZ6WlhRdlhHNGdJQ0IyTWk0d0xXMXZaR2xtYVdWa0lId2dNakF4TVRBeE1qWmNiaUFnSUV4cFkyVnVjMlU2SUc1dmJtVWdLSEIxWW14cFl5QmtiMjFoYVc0cFhHNHFMMXh1YUhSdGJDd2dZbTlrZVN3Z1pHbDJMQ0J6Y0dGdUxDQmhjSEJzWlhRc0lHOWlhbVZqZEN3Z2FXWnlZVzFsTEZ4dWFERXNJR2d5TENCb015d2dhRFFzSUdnMUxDQm9OaXdnY0N3Z1lteHZZMnR4ZFc5MFpTd2djSEpsTEZ4dVlTd2dZV0ppY2l3Z1lXTnliMjU1YlN3Z1lXUmtjbVZ6Y3l3Z1ltbG5MQ0JqYVhSbExDQmpiMlJsTEZ4dVpHVnNMQ0JrWm00c0lHVnRMQ0JwYldjc0lHbHVjeXdnYTJKa0xDQnhMQ0J6TENCellXMXdMRnh1YzIxaGJHd3NJSE4wY21sclpTd2djM1J5YjI1bkxDQnpkV0lzSUhOMWNDd2dkSFFzSUhaaGNpeGNibUlzSUhVc0lHa3NJR05sYm5SbGNpeGNibVJzTENCa2RDd2daR1FzSUc5c0xDQjFiQ3dnYkdrc1hHNW1hV1ZzWkhObGRDd2dabTl5YlN3Z2JHRmlaV3dzSUd4bFoyVnVaQ3hjYm5SaFlteGxMQ0JqWVhCMGFXOXVMQ0IwWW05a2VTd2dkR1p2YjNRc0lIUm9aV0ZrTENCMGNpd2dkR2dzSUhSa0xGeHVZWEowYVdOc1pTd2dZWE5wWkdVc0lHTmhiblpoY3l3Z1pHVjBZV2xzY3l3Z1pXMWlaV1FzWEc1bWFXZDFjbVVzSUdacFoyTmhjSFJwYjI0c0lHWnZiM1JsY2l3Z2FHVmhaR1Z5TENCb1ozSnZkWEFzWEc1dFpXNTFMQ0J1WVhZc0lHOTFkSEIxZEN3Z2NuVmllU3dnYzJWamRHbHZiaXdnYzNWdGJXRnllU3hjYm5ScGJXVXNJRzFoY21zc0lHRjFaR2x2TENCMmFXUmxieUI3WEc0Z0lHMWhjbWRwYmpvZ01EdGNiaUFnY0dGa1pHbHVaem9nTUR0Y2JpQWdZbTl5WkdWeU9pQXdPMXh1SUNCMlpYSjBhV05oYkMxaGJHbG5iam9nWW1GelpXeHBibVU3WEc1OVhHNWNibUVnZTF4dUlDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklHNXZibVU3WEc1OVhHNWhPbWh2ZG1WeUlIdGNiaUFnZEdWNGRDMWtaV052Y21GMGFXOXVPaUIxYm1SbGNteHBibVU3WEc1OVhHNWNibTlzTENCMWJDQjdYRzRnSUd4cGMzUXRjM1I1YkdVNklHNXZibVU3WEc1OVhHNWNibUpzYjJOcmNYVnZkR1U2WW1WbWIzSmxMQ0JpYkc5amEzRjFiM1JsT21GbWRHVnlMRnh1Y1RwaVpXWnZjbVVzSUhFNllXWjBaWElnZTF4dUlDQmpiMjUwWlc1ME9pQmNJbHdpTzF4dUlDQmpiMjUwWlc1ME9pQnViMjVsTzF4dWZWeHVYRzUwWVdKc1pTQjdYRzRnSUdKdmNtUmxjaTFqYjJ4c1lYQnpaVG9nWTI5c2JHRndjMlU3WEc0Z0lHSnZjbVJsY2kxemNHRmphVzVuT2lBd08xeHVmVnh1WEc1MFpYaDBZWEpsWVNCN1hHNGdJRzkyWlhKbWJHOTNPaUJoZFhSdk8xeHVJQ0IyWlhKMGFXTmhiQzFoYkdsbmJqb2dkRzl3TzF4dUlDQnlaWE5wZW1VNklIWmxjblJwWTJGc08xeHVmVnh1WEc0dktpcGNiaUFxSUVOdmNuSmxZM1FnWUdsdWJHbHVaUzFpYkc5amEyQWdaR2x6Y0d4aGVTQnViM1FnWkdWbWFXNWxaQ0JwYmlCSlJTQTJMemN2T0M4NUlHRnVaQ0JHYVhKbFptOTRJRE11WEc0Z0tpOWNibUYxWkdsdkxGeHVZMkZ1ZG1GekxGeHVkbWxrWlc4Z2UxeHVJQ0JrYVhOd2JHRjVPaUJwYm14cGJtVXRZbXh2WTJzN1hHNGdJQ3BrYVhOd2JHRjVPaUJwYm14cGJtVTdYRzRnSUNwNmIyOXRPaUF4TzF4dUlDQnRZWGd0ZDJsa2RHZzZJREV3TUNVN1hHNTlYRzVjYm1FNlptOWpkWE1nZTF4dUlDQnZkWFJzYVc1bE9pQjBhR2x1SUdSdmRIUmxaRHRjYm4xY2JseHVZVHBoWTNScGRtVXNYRzVoT21odmRtVnlJSHRjYmlBZ2IzVjBiR2x1WlRvZ01EdGNibjFjYmx4dVptOXliU0I3WEc0Z0lHMWhjbWRwYmpvZ01EdGNibjFjYmx4dVptbGxiR1J6WlhRZ2UxeHVJQ0JpYjNKa1pYSTZJREZ3ZUNCemIyeHBaQ0FqWXpCak1HTXdPMXh1SUNCdFlYSm5hVzQ2SURBZ01uQjRPMXh1SUNCd1lXUmthVzVuT2lBd0xqTTFaVzBnTUM0Mk1qVmxiU0F3TGpjMVpXMDdYRzU5WEc1Y2JtSjFkSFJ2Yml4Y2JtbHVjSFYwSUh0Y2JpQWdiR2x1WlMxb1pXbG5hSFE2SUc1dmNtMWhiRHRjYm4xY2JseHVZblYwZEc5dUxGeHVjMlZzWldOMElIdGNiaUFnZEdWNGRDMTBjbUZ1YzJadmNtMDZJRzV2Ym1VN1hHNTlYRzVjYm1KMWRIUnZibHRrYVhOaFlteGxaRjBzWEc1b2RHMXNJR2x1Y0hWMFcyUnBjMkZpYkdWa1hTQjdYRzRnSUdOMWNuTnZjam9nWkdWbVlYVnNkRHRjYm4xY2JseHVhVzV3ZFhSYmRIbHdaVDF6WldGeVkyaGRPam90ZDJWaWEybDBMWE5sWVhKamFDMWpZVzVqWld3dFluVjBkRzl1TEZ4dWFXNXdkWFJiZEhsd1pUMXpaV0Z5WTJoZE9qb3RkMlZpYTJsMExYTmxZWEpqYUMxa1pXTnZjbUYwYVc5dUlIdGNiaUFnTFhkbFltdHBkQzFoY0hCbFlYSmhibU5sT2lCdWIyNWxPMXh1ZlZ4dVhHNWlkWFIwYjI0Nk9pMXRiM290Wm05amRYTXRhVzV1WlhJc1hHNXBibkIxZERvNkxXMXZlaTFtYjJOMWN5MXBibTVsY2lCN1hHNGdJR0p2Y21SbGNqb2dNRHRjYmlBZ2NHRmtaR2x1WnpvZ01EdGNibjFjYmx4dWRHVjRkR0Z5WldFZ2UxeHVJQ0J5WlhOcGVtVTZJSFpsY25ScFkyRnNPMXh1ZlZ4dVhHNHVZMmh5YjIxbFpuSmhiV1VnZTF4dUlDQnRZWEpuYVc0NklEQXVNbVZ0SURBN1hHNGdJR0poWTJ0bmNtOTFibVE2SUNOalkyTTdYRzRnSUdOdmJHOXlPaUFqTURBd08xeHVJQ0J3WVdSa2FXNW5PaUF3TGpKbGJTQXdPMXh1ZlZ4dVhHNHFMRnh1S2pvNlltVm1iM0psTEZ4dUtqbzZZV1owWlhJZ2UxeHVJQ0JpYjNndGMybDZhVzVuT2lCaWIzSmtaWEl0WW05NE8xeHVmVnh1WEc1aWIyUjVJSHRjYmlBZ2JXRjRMWGRwWkhSb09pQXhORFF3Y0hnN1hHNGdJR1p2Ym5RdGMybDZaVG9nTVRSd2VEdGNiaUFnWm05dWRDMW1ZVzFwYkhrNklDMWhjSEJzWlMxemVYTjBaVzBzSUZ3aVVHeDFjeUJLWVd0aGNuUmhJRk5oYm5OY0lpd2dVbTlpYjNSdkxDQnpZVzV6TFhObGNtbG1PMXh1SUNCc2FXNWxMV2hsYVdkb2REb2dNUzQxTzF4dUlDQmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpabVptWm1abU8xeHVJQ0JqYjJ4dmNqb2dJMlptWm1abVpqdGNibjFjYm1KdlpIa3VibTh0YzJOeWIyeHNJSHRjYmlBZ2IzWmxjbVpzYjNjNklHaHBaR1JsYmp0Y2JuMWNia0J0WldScFlTQW9iV0Y0TFhkcFpIUm9PaUEzTURCd2VDa2dlMXh1SUNCaWIyUjVJSHRjYmlBZ0lDQmpiMnh2Y2pvZ0kyWm1aanRjYmlBZ0lDQmlZV05yWjNKdmRXNWtMV052Ykc5eU9pQWpNREF3TzF4dUlDQjlYRzU5WEc1Y2JpNWpiMjUwWVdsdVpYSWdlMXh1SUNCdFlYZ3RkMmxrZEdnNklERXhPVEp3ZUR0Y2JpQWdiV0Z5WjJsdU9pQXdJR0YxZEc4N1hHNTlYRzVBYldWa2FXRWdLRzFoZUMxM2FXUjBhRG9nTVRFNU1uQjRLU0I3WEc0Z0lDNWpiMjUwWVdsdVpYSWdlMXh1SUNBZ0lIQmhaR1JwYm1jNklEQWdNakJ3ZUR0Y2JpQWdmVnh1ZlZ4dVFHMWxaR2xoSUNodFlYZ3RkMmxrZEdnNklEYzBNSEI0S1NCN1hHNGdJQzVqYjI1MFlXbHVaWElnZTF4dUlDQWdJSEJoWkdScGJtYzZJREFnTVRCd2VEdGNiaUFnZlZ4dWZWeHVYRzR1YUdWaFpHVnlMV0YxZEc5eUlIdGNiaUFnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSXpGRE1VTXhRenRjYmlBZ2NHOXphWFJwYjI0NklISmxiR0YwYVhabE8xeHVmVnh1WEc0dWFHVmhaR1Z5WDE5aGRYUnZjaTFzYVhOMElIdGNiaUFnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4dUlDQjBiM0E2SURJMmNIZzdYRzRnSUhKcFoyaDBPaUF4TWpSd2VEdGNibjFjYmtCdFpXUnBZU0FvYldGNExYZHBaSFJvT2lBeE16QXdjSGdwSUh0Y2JpQWdMbWhsWVdSbGNsOWZZWFYwYjNJdGJHbHpkQ0I3WEc0Z0lDQWdjbWxuYUhRNklEVXdjSGc3WEc0Z0lIMWNibjFjYmtCdFpXUnBZU0FvYldGNExYZHBaSFJvT2lBeE1EazFjSGdwSUh0Y2JpQWdMbWhsWVdSbGNsOWZZWFYwYjNJdGJHbHpkQ0I3WEc0Z0lDQWdaR2x6Y0d4aGVUb2dibTl1WlR0Y2JpQWdmVnh1ZlZ4dVhHNHVhR1ZoWkdWeVgxOWliM2dnZTF4dUlDQndiM05wZEdsdmJqb2dZV0p6YjJ4MWRHVTdYRzRnSUhSdmNEb2dNVGt5Y0hnN1hHNGdJR3hsWm5RNklERXlOSEI0TzF4dWZWeHVYRzR1YUdWaFpHVnlYMTloZFhSdmNpMTBiM0FnZTF4dUlDQmthWE53YkdGNU9pQm1iR1Y0TzF4dUlDQnFkWE4wYVdaNUxXTnZiblJsYm5RNklITndZV05sTFdKbGRIZGxaVzQ3WEc0Z0lHMWhjbWRwYmkxaWIzUjBiMjA2SURnMmNIZzdYRzU5WEc1Y2JpNW9aV0ZrWlhKZlgyRjFkRzl5TFhSdmNDMHRkR2wwYkdVZ2UxeHVJQ0J0WVhndGQybGtkR2c2SURVMkxqRWxPMXh1ZlZ4dVhHNHVhR1ZoWkdWeVgxOWhkWFJ2Y2kxMGIzQXRMWFJwZEd4bElHZ3lJSHRjYmlBZ1ptOXVkQzFtWVcxcGJIazZJRndpVDNCbGJpQlRZVzV6WENJN1hHNGdJR1p2Ym5RdGQyVnBaMmgwT2lBMU1EQTdYRzRnSUdadmJuUXRjMmw2WlRvZ056SndlRHRjYmlBZ2JHbHVaUzFvWldsbmFIUTZJREV4TUNVN1hHNGdJR052Ykc5eU9pQWpSamxHT1VZNU8xeHVJQ0J0WVhKbmFXNHRjbWxuYUhRNklEWTBjSGc3WEc1OVhHNUFjM1Z3Y0c5eWRITWdLQzEzWldKcmFYUXRZWEJ3WldGeVlXNWpaVHB1YjI1bEtYdGNibHh1ZlZ4dVhHNGdRRzFsWkdsaElDaHRZWGd0ZDJsa2RHZzZJRGN3TUhCNEtYdGNibHh1UUhOMWNIQnZjblJ6SUNndGQyVmlhMmwwTFdGd2NHVmhjbUZ1WTJVNmJtOXVaU2w3WEc1Y2JuMWNibHh1ZlZ4dVhHNGdRRzFsWkdsaElDaHRZWGd0ZDJsa2RHZzZJREV4T1RKd2VDbDdYRzVjYmtCemRYQndiM0owY3lBb0xYZGxZbXRwZEMxaGNIQmxZWEpoYm1ObE9tNXZibVVwZTF4dVhHNTlYRzVjYm4xY2JseHVJRUJ0WldScFlTQW9iV0Y0TFhkcFpIUm9PaUEzTkRCd2VDbDdYRzVjYmtCemRYQndiM0owY3lBb0xYZGxZbXRwZEMxaGNIQmxZWEpoYm1ObE9tNXZibVVwZTF4dVhHNTlYRzVjYm4xY2JseHVJRUJ0WldScFlTQW9iV0Y0TFhkcFpIUm9PaUF4TXpBd2NIZ3BlMXh1WEc1QWMzVndjRzl5ZEhNZ0tDMTNaV0pyYVhRdFlYQndaV0Z5WVc1alpUcHViMjVsS1h0Y2JseHVmVnh1WEc1OVhHNWNiaUJBYldWa2FXRWdLRzFoZUMxM2FXUjBhRG9nTVRBNU5YQjRLWHRjYmx4dVFITjFjSEJ2Y25SeklDZ3RkMlZpYTJsMExXRndjR1ZoY21GdVkyVTZibTl1WlNsN1hHNWNibjFjYmx4dWZWeHVJaXdpUUdsdGNHOXlkQ0JjSWk0dUwzTmpjM012WW14dlkyc3ZkbUZ5YzF3aU8xeHVRR2x0Y0c5eWRDQmNJaTR1TDNOamMzTXZZbXh2WTJzdmJXbDRhVzV6WENJN1hHNUFhVzF3YjNKMElGd2lkbVZ1Wkc5eUwzSmxjMlYwTG5OamMzTmNJanRjYmx4dVFHMXBlR2x1SUhCb0lIdGNibHgwUUcxbFpHbGhJQ2h0WVhndGQybGtkR2c2SURjd01IQjRLU0I3WEc1Y2RGeDBRR052Ym5SbGJuUTdYRzVjZEgxY2JuMWNiaW9zWEc0cU9qcGlaV1p2Y21Vc1hHNHFPanBoWm5SbGNpQjdYRzVjZEdKdmVDMXphWHBwYm1jNklHSnZjbVJsY2kxaWIzZzdYRzU5WEc1aWIyUjVJSHRjYmx4MGJXRjRMWGRwWkhSb09pQXhORFF3Y0hnN1hHNWNkR1p2Ym5RdGMybDZaVG9nSkdKaGMyVXRabTl1ZEMxemFYcGxPMXh1WEhSbWIyNTBMV1poYldsc2VUb2dMV0Z3Y0d4bExYTjVjM1JsYlN3Z1hDSlFiSFZ6SUVwaGEyRnlkR0VnVTJGdWMxd2lMQ0JTYjJKdmRHOHNJSE5oYm5NdGMyVnlhV1k3WEc1Y2RHeHBibVV0YUdWcFoyaDBPaUF4TGpVN1hHNWNkR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05tWm1abVptWTdYRzVjZEZ4dVhIUmpiMnh2Y2pvZ0pIZG9hWFJsTzF4dVhHNWNkQ1l1Ym04dGMyTnliMnhzSUh0Y2JseDBYSFJ2ZG1WeVpteHZkem9nYUdsa1pHVnVPMXh1WEhSOVhHNWNibHh1WEhSQWFXNWpiSFZrWlNCd2FDQjdYRzVjZEZ4MFkyOXNiM0k2SUNObVptWTdYRzVjZEZ4MFltRmphMmR5YjNWdVpDMWpiMnh2Y2pvZ0l6QXdNRHRjYmx4MGZWeDBYRzU5WEc0dVkyOXVkR0ZwYm1WeUlIdGNibHgwYldGNExYZHBaSFJvT2lBeE1Ua3ljSGc3WEc1Y2RHMWhjbWRwYmpvZ01DQmhkWFJ2TzF4dVhHNWNkRUJwYm1Oc2RXUmxJR0p5WldGcmNHOXBiblFvSkd4aGNtZGxMV0p3S1NCN1hHNWNkRngwY0dGa1pHbHVaem9nTUNBeU1IQjRPMXh1WEhSOVhHNWNkRUJwYm1Oc2RXUmxJR0p5WldGcmNHOXBiblFvSkcxdlltbHNaUzFpY0NrZ2UxeHVYSFJjZEhCaFpHUnBibWM2SURBZ01UQndlRHRjYmx4MGZWeHVmVnh1TG1obFlXUmxjaTFoZFhSdmNpQjdYRzVjZEdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUNSdFlXbHVPMXh1WEhSd2IzTnBkR2x2YmpvZ2NtVnNZWFJwZG1VN1hHNTlYRzVBYVcxd2IzSjBJRndpWW14dlkyc3ZhR1ZoWkdWeUxXRjFkRzl5TG5OamMzTmNJanNpTENJa1ltRnpaUzFtYjI1MExYTnBlbVU2SURFMGNIZzdYRzVjYmlSd2NtbHRZWEo1T2lBak16SkNRMEV6TzF4dUpITmxZMjl1WkdGeWVUb2dJekV5TVRJeE1qdGNiaVIzYUdsMFpUb2dJMlptWm1abVpqdGNiaVJ5WldRNklDTmxaRE13TWpRN1hHNGtZbXgxWlRvZ0l6TXhORGRqT1R0Y2JpUmliR0ZqYXpvZ0l6QXdNREF3TUR0Y2JpUnNhV2RvZERvZ0kwUXlSREpFTWp0Y2JpUnRZV2x1T2lBak1VTXhRekZETzF4dVhHNGtZbWxuTFdKd09pQXhORE15Y0hnN1hHNGtiV0Y0VEdGeVoyVXRZbkE2SURFek1EQndlRHRjYmlSc1lYSm5aUzFpY0RvZ01URTVNbkI0TzF4dUpIZHBaR1V0WW5BNklERXdPVFZ3ZUR0Y2JpUjBZV0pzWlhRdFluQTZJRGs1TVhCNE8xeHVKRzFwWkdSc1pTMWljRG9nT0RRd2NIZzdYRzRrYlc5aWFXeGxMV0p3T2lBM05EQndlRHRjYmlSemJHbGtaWEl0WW5BNklEVTRNSEI0TzF4dUpITnRZV3hzTFdKd09pQTFNREJ3ZUR0Y2JpUnNhWFIwYkdVdFluQTZJRFEwTUhCNE8xeHVKSGRsWlMxaWNEb2dNelF3Y0hnN0lpd2lRRzFwZUdsdUlHSnlaV0ZyY0c5cGJuUW9KR0p5S1NCN1hHNWNkRUJ0WldScFlTQW9iV0Y0TFhkcFpIUm9PaUFrWW5JcElIdGNibHgwWEhSQVkyOXVkR1Z1ZER0Y2JseDBmVnh1ZlNJc0lpNW9aV0ZrWlhKZlgyRjFkRzl5TFd4cGMzUWdlMXh1WEhSd2IzTnBkR2x2YmpvZ1lXSnpiMngxZEdVN1hHNWNkSFJ2Y0RvZ01qWndlRHRjYmx4MGNtbG5hSFE2SURFeU5IQjRPMXh1WEhSQWFXNWpiSFZrWlNCaWNtVmhhM0J2YVc1MEtDUnRZWGhNWVhKblpTMWljQ2tnZTF4dVhIUmNkSEpwWjJoME9pQTFNSEI0TzF4dVhIUjlYRzVjZEVCcGJtTnNkV1JsSUdKeVpXRnJjRzlwYm5Rb0pIZHBaR1V0WW5BcElIdGNibHgwWEhSa2FYTndiR0Y1T2lCdWIyNWxPMXh1WEhSOVhHNTlYRzR1YUdWaFpHVnlYMTlpYjNnZ2UxeHVYSFFnY0c5emFYUnBiMjQ2SUdGaWMyOXNkWFJsTzF4dVhIUWdkRzl3T2lBeE9USndlRHRjYmx4MElHeGxablE2SURFeU5IQjRPMXh1ZlZ4dUxtaGxZV1JsY2w5ZllYVjBiM0l0ZEc5d0lIdGNibHgwWkdsemNHeGhlVG9nWm14bGVEdGNibHgwYW5WemRHbG1lUzFqYjI1MFpXNTBPaUJ6Y0dGalpTMWlaWFIzWldWdU8xeHVYSFJ0WVhKbmFXNHRZbTkwZEc5dE9pQTRObkI0TzF4dWZWeHVMbWhsWVdSbGNsOWZZWFYwYjNJdGRHOXdMUzEwYVhSc1pTQjdYRzVjZEcxaGVDMTNhV1IwYURvZ05UWXVNU1U3WEc1OVhHNHVhR1ZoWkdWeVgxOWhkWFJ2Y2kxMGIzQXRMWFJwZEd4bElHZ3lJSHRjYmx4MFptOXVkQzFtWVcxcGJIazZJQ2RQY0dWdUlGTmhibk1uTzF4dVhIUm1iMjUwTFhkbGFXZG9kRG9nTlRBd08xeHVYSFJtYjI1MExYTnBlbVU2SURjeWNIZzdYRzVjZEd4cGJtVXRhR1ZwWjJoME9pQXhNVEFsTzF4dVhIUmpiMnh2Y2pvZ0kwWTVSamxHT1R0Y2JseDBiV0Z5WjJsdUxYSnBaMmgwT2lBMk5IQjRPMXh1ZlZ4dUxtaGxZV1JsY2w5ZllYVjBiM0l0ZEc5d0xTMWpiMjUwWlc1MElIdGNibHgwWEc1OUlsMTkgKi8iLCIvKiBodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0L1xuICAgdjIuMC1tb2RpZmllZCB8IDIwMTEwMTI2XG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxuKi9cblxuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbmIsIHUsIGksIGNlbnRlcixcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XG4gIG1hcmdpbjogMDtcblx0cGFkZGluZzogMDtcblx0Ym9yZGVyOiAwO1xuXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5hIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgJjpob3ZlciB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgIH1cbn1cblxuLy8gLyogbWFrZSBzdXJlIHRvIHNldCBzb21lIGZvY3VzIHN0eWxlcyBmb3IgYWNjZXNzaWJpbGl0eSAqL1xuLy8gOmZvY3VzIHtcbi8vICAgICBvdXRsaW5lOiAwO1xuLy8gfVxuXG4vLyAvKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXG4vLyBhcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxuLy8gZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcbi8vIFx0ZGlzcGxheTogYmxvY2s7XG4vLyB9XG5cbi8vIGJvZHkge1xuLy8gXHRsaW5lLWhlaWdodDogMTtcbi8vIH1cblxub2wsIHVsIHtcblx0bGlzdC1zdHlsZTogbm9uZTtcbn1cblxuLy8gYmxvY2txdW90ZSwgcSB7XG4vLyBcdHF1b3Rlczogbm9uZTtcbi8vIH1cblxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSwgcTphZnRlciB7XG5cdGNvbnRlbnQ6ICcnO1xuXHRjb250ZW50OiBub25lO1xufVxuXG50YWJsZSB7XG5cdGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5cdGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG4vLyBpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG4vLyBpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24sXG4vLyBpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLXJlc3VsdHMtYnV0dG9uLFxuLy8gaW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWRlY29yYXRpb24ge1xuLy8gICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbi8vICAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG4vLyB9XG5cbi8vIGlucHV0W3R5cGU9c2VhcmNoXSB7XG4vLyAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuLy8gICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbi8vICAgICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuLy8gICAgIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4vLyAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4vLyB9XG5cbnRleHRhcmVhIHtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgIHJlc2l6ZTogdmVydGljYWw7XG59XG5cbi8qKlxuICogQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cbiAqL1xuXG5hdWRpbyxcbmNhbnZhcyxcbnZpZGVvIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgKmRpc3BsYXk6IGlubGluZTtcbiAgICAqem9vbTogMTtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG59XG5cbi8vIC8qKlxuLy8gICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbi8vICAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4vLyAgKi9cblxuLy8gYXVkaW86bm90KFtjb250cm9sc10pIHtcbi8vICAgICBkaXNwbGF5OiBub25lO1xuLy8gICAgIGhlaWdodDogMDtcbi8vIH1cblxuLy8gLyoqXG4vLyAgKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgNy84LzksIEZpcmVmb3ggMywgYW5kIFNhZmFyaSA0LlxuLy8gICogS25vd24gaXNzdWU6IG5vIElFIDYgc3VwcG9ydC5cbi8vICAqL1xuXG4vLyBbaGlkZGVuXSB7XG4vLyAgICAgZGlzcGxheTogbm9uZTtcbi8vIH1cblxuLy8gLyoqXG4vLyAgKiAxLiBDb3JyZWN0IHRleHQgcmVzaXppbmcgb2RkbHkgaW4gSUUgNi83IHdoZW4gYm9keSBgZm9udC1zaXplYCBpcyBzZXQgdXNpbmdcbi8vICAqICAgIGBlbWAgdW5pdHMuXG4vLyAgKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbi8vICAqICAgIHVzZXIgem9vbS5cbi8vICAqL1xuXG4vLyBodG1sIHtcbi8vICAgICBmb250LXNpemU6IDEwMCU7IC8qIDEgKi9cbi8vICAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbi8vICAgICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xuLy8gfVxuXG4vLyAvKipcbi8vICAqIEFkZHJlc3MgYG91dGxpbmVgIGluY29uc2lzdGVuY3kgYmV0d2VlbiBDaHJvbWUgYW5kIG90aGVyIGJyb3dzZXJzLlxuLy8gICovXG5cbmE6Zm9jdXMge1xuICAgIG91dGxpbmU6IHRoaW4gZG90dGVkO1xufVxuXG4vLyAvKipcbi8vICAqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLlxuLy8gICovXG5cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gICAgb3V0bGluZTogMDtcbn1cblxuLy8gLyoqXG4vLyAgKiAxLiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cbi8vICAqIDIuIEltcHJvdmUgaW1hZ2UgcXVhbGl0eSB3aGVuIHNjYWxlZCBpbiBJRSA3LlxuLy8gICovXG5cbi8vIGltZyB7XG4vLyAgICAgYm9yZGVyOiAwOyAvKiAxICovXG4vLyAgICAgLW1zLWludGVycG9sYXRpb24tbW9kZTogYmljdWJpYzsgLyogMiAqL1xuLy8gfVxuXG4vLyAvKipcbi8vICAqIEFkZHJlc3MgbWFyZ2luIG5vdCBwcmVzZW50IGluIElFIDYvNy84LzksIFNhZmFyaSA1LCBhbmQgT3BlcmEgMTEuXG4vLyAgKi9cblxuLy8gZmlndXJlIHtcbi8vICAgICBtYXJnaW46IDA7XG4vLyB9XG5cbi8vIC8qKlxuLy8gICogQ29ycmVjdCBtYXJnaW4gZGlzcGxheWVkIG9kZGx5IGluIElFIDYvNy5cbi8vICAqL1xuXG5mb3JtIHtcbiAgICBtYXJnaW46IDA7XG59XG5cbi8vIC8qKlxuLy8gICogRGVmaW5lIGNvbnNpc3RlbnQgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nLlxuLy8gICovXG5cbmZpZWxkc2V0IHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICAgIG1hcmdpbjogMCAycHg7XG4gICAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtO1xufVxuXG4vLyAvKipcbi8vICAqIDEuIENvcnJlY3QgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZCBpbiBJRSA2LzcvOC85LlxuLy8gICogMi4gQ29ycmVjdCB0ZXh0IG5vdCB3cmFwcGluZyBpbiBGaXJlZm94IDMuXG4vLyAgKiAzLiBDb3JyZWN0IGFsaWdubWVudCBkaXNwbGF5ZWQgb2RkbHkgaW4gSUUgNi83LlxuLy8gICovXG5cbi8vIGxlZ2VuZCB7XG4vLyAgICAgYm9yZGVyOiAwOyAvKiAxICovXG4vLyAgICAgcGFkZGluZzogMDtcbi8vICAgICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvKiAyICovXG4vLyAgICAgKm1hcmdpbi1sZWZ0OiAtN3B4OyAvKiAzICovXG4vLyB9XG5cbi8vIC8qKlxuLy8gICogMS4gQ29ycmVjdCBmb250IHNpemUgbm90IGJlaW5nIGluaGVyaXRlZCBpbiBhbGwgYnJvd3NlcnMuXG4vLyAgKiAyLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIElFIDYvNywgRmlyZWZveCAzKywgU2FmYXJpIDUsXG4vLyAgKiAgICBhbmQgQ2hyb21lLlxuLy8gICogMy4gSW1wcm92ZSBhcHBlYXJhbmNlIGFuZCBjb25zaXN0ZW5jeSBpbiBhbGwgYnJvd3NlcnMuXG4vLyAgKi9cblxuLy8gYnV0dG9uLFxuLy8gaW5wdXQsXG4vLyBzZWxlY3QsXG4vLyB0ZXh0YXJlYSB7XG4vLyAgICAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXG4vLyAgICAgbWFyZ2luOiAwOyAvKiAyICovXG4vLyAgICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAzICovXG4vLyAgICAgKnZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IC8qIDMgKi9cbi8vIH1cblxuLy8gLyoqXG4vLyAgKiBBZGRyZXNzIEZpcmVmb3ggMysgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXG4vLyAgKiB0aGUgVUEgc3R5bGVzaGVldC5cbi8vICAqL1xuXG5idXR0b24sXG5pbnB1dCB7XG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbn1cblxuLy8gLyoqXG4vLyAgKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4vLyAgKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuLy8gICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBDaHJvbWUsIFNhZmFyaSA1KywgYW5kIElFIDYrLlxuLy8gICogQ29ycmVjdCBgc2VsZWN0YCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94IDQrIGFuZCBPcGVyYS5cbi8vICAqL1xuXG5idXR0b24sXG5zZWxlY3Qge1xuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vLyAvKipcbi8vICAqIDEuIEF2b2lkIHRoZSBXZWJLaXQgYnVnIGluIEFuZHJvaWQgNC4wLiogd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gXG4vLyAgKiAgICBhbmQgYHZpZGVvYCBjb250cm9scy5cbi8vICAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cbi8vICAqIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlXG4vLyAgKiAgICBgaW5wdXRgIGFuZCBvdGhlcnMuXG4vLyAgKiA0LiBSZW1vdmUgaW5uZXIgc3BhY2luZyBpbiBJRSA3IHdpdGhvdXQgYWZmZWN0aW5nIG5vcm1hbCB0ZXh0IGlucHV0cy5cbi8vICAqICAgIEtub3duIGlzc3VlOiBpbm5lciBzcGFjaW5nIHJlbWFpbnMgaW4gSUUgNi5cbi8vICAqL1xuXG4vLyBidXR0b24sXG4vLyBodG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIC8qIDEgKi9cbi8vIGlucHV0W3R5cGU9XCJyZXNldFwiXSxcbi8vIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuLy8gICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG4vLyAgICAgY3Vyc29yOiBwb2ludGVyOyAvKiAzICovXG4vLyAgICAgKm92ZXJmbG93OiB2aXNpYmxlOyAgLyogNCAqL1xuLy8gfVxuXG4vLyAvKipcbi8vICAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXG4vLyAgKi9cblxuYnV0dG9uW2Rpc2FibGVkXSxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5cbi8vIC8qKlxuLy8gICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBjb250ZW50LWJveCBpbiBJRSA4LzkuXG4vLyAgKiAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LlxuLy8gICogMy4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDcuXG4vLyAgKiAgICBLbm93biBpc3N1ZTogZXhjZXNzIHBhZGRpbmcgcmVtYWlucyBpbiBJRSA2LlxuLy8gICovXG5cbi8vIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbi8vIGlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4vLyAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuLy8gICAgIHBhZGRpbmc6IDA7IC8qIDIgKi9cbi8vICAgICAqaGVpZ2h0OiAxM3B4OyAvKiAzICovXG4vLyAgICAgKndpZHRoOiAxM3B4OyAvKiAzICovXG4vLyB9XG5cbi8vIC8qKlxuLy8gICogMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIDUgYW5kIENocm9tZS5cbi8vICAqIDIuIEFkZHJlc3MgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gU2FmYXJpIDUgYW5kIENocm9tZVxuLy8gICogICAgKGluY2x1ZGUgYC1tb3pgIHRvIGZ1dHVyZS1wcm9vZikuXG4vLyAgKi9cblxuLy8gaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7XG4vLyAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbi8vICAgICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuLy8gICAgIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDIgKi9cbi8vICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbi8vIH1cblxuLy8gLyoqXG4vLyAgKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIDUgYW5kIENocm9tZVxuLy8gICogb24gT1MgWC5cbi8vICAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vLyAvKipcbi8vICAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCAzKy5cbi8vICAqL1xuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgYm9yZGVyOiAwO1xuICAgIHBhZGRpbmc6IDA7XG59XG5cbi8vIC8qKlxuLy8gICogMS4gUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDYvNy84LzkuXG4vLyAgKiAyLiBJbXByb3ZlIHJlYWRhYmlsaXR5IGFuZCBhbGlnbm1lbnQgaW4gYWxsIGJyb3dzZXJzLlxuLy8gICovXG5cbi8vIHRleHRhcmVhIHtcbi8vICAgICBvdmVyZmxvdzogYXV0bzsgLyogMSAqL1xuLy8gICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7IC8qIDIgKi9cbi8vIH1cblxuLy8gLyoqXG4vLyAgKiBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHMuXG4vLyAgKi9cblxuLy8gdGFibGUge1xuLy8gICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4vLyAgICAgYm9yZGVyLXNwYWNpbmc6IDA7XG4vLyB9XG5cblxuXG5cbi8vIDo6LW1vei1zZWxlY3Rpb24ge1xuLy8gICAgIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XG4vLyAgICAgdGV4dC1zaGFkb3c6IG5vbmU7XG4vLyB9XG5cbi8vIDo6c2VsZWN0aW9uIHtcbi8vICAgICBiYWNrZ3JvdW5kOiAjYjNkNGZjO1xuLy8gICAgIHRleHQtc2hhZG93OiBub25lO1xuLy8gfVxuXG4vLyBpbWcge1xuLy8gICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4vLyB9XG5cbi8vIGZpZWxkc2V0IHtcbi8vICAgICBib3JkZXI6IDA7XG4vLyAgICAgbWFyZ2luOiAwO1xuLy8gICAgIHBhZGRpbmc6IDA7XG4vLyB9XG5cbnRleHRhcmVhIHtcbiAgICByZXNpemU6IHZlcnRpY2FsO1xufVxuXG4uY2hyb21lZnJhbWUge1xuICAgIG1hcmdpbjogMC4yZW0gMDtcbiAgICBiYWNrZ3JvdW5kOiAjY2NjO1xuICAgIGNvbG9yOiAjMDAwO1xuICAgIHBhZGRpbmc6IDAuMmVtIDA7XG59XG5cbiIsIkBpbXBvcnQgXCIuLi9zY3NzL2Jsb2NrL3ZhcnNcIjtcbkBpbXBvcnQgXCIuLi9zY3NzL2Jsb2NrL21peGluc1wiO1xuQGltcG9ydCBcInZlbmRvci9yZXNldC5zY3NzXCI7XG5cbkBtaXhpbiBwaCB7XG5cdEBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuXHRcdEBjb250ZW50O1xuXHR9XG59XG4qLFxuKjo6YmVmb3JlLFxuKjo6YWZ0ZXIge1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuYm9keSB7XG5cdG1heC13aWR0aDogMTQ0MHB4O1xuXHRmb250LXNpemU6ICRiYXNlLWZvbnQtc2l6ZTtcblx0Zm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIFwiUGx1cyBKYWthcnRhIFNhbnNcIiwgUm9ib3RvLCBzYW5zLXNlcmlmO1xuXHRsaW5lLWhlaWdodDogMS41O1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuXHRcblx0Y29sb3I6ICR3aGl0ZTtcblxuXHQmLm5vLXNjcm9sbCB7XG5cdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0fVxuXG5cblx0QGluY2x1ZGUgcGgge1xuXHRcdGNvbG9yOiAjZmZmO1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG5cdH1cdFxufVxuLmNvbnRhaW5lciB7XG5cdG1heC13aWR0aDogMTE5MnB4O1xuXHRtYXJnaW46IDAgYXV0bztcblxuXHRAaW5jbHVkZSBicmVha3BvaW50KCRsYXJnZS1icCkge1xuXHRcdHBhZGRpbmc6IDAgMjBweDtcblx0fVxuXHRAaW5jbHVkZSBicmVha3BvaW50KCRtb2JpbGUtYnApIHtcblx0XHRwYWRkaW5nOiAwIDEwcHg7XG5cdH1cbn1cbi5oZWFkZXItYXV0b3Ige1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkbWFpbjtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xufVxuQGltcG9ydCBcImJsb2NrL2hlYWRlci1hdXRvci5zY3NzXCI7IiwiLmhlYWRlcl9fYXV0b3ItbGlzdCB7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dG9wOiAyNnB4O1xuXHRyaWdodDogMTI0cHg7XG5cdEBpbmNsdWRlIGJyZWFrcG9pbnQoJG1heExhcmdlLWJwKSB7XG5cdFx0cmlnaHQ6IDUwcHg7XG5cdH1cblx0QGluY2x1ZGUgYnJlYWtwb2ludCgkd2lkZS1icCkge1xuXHRcdGRpc3BsYXk6IG5vbmU7XG5cdH1cbn1cbi5oZWFkZXJfX2JveCB7XG5cdCBwb3NpdGlvbjogYWJzb2x1dGU7XG5cdCB0b3A6IDE5MnB4O1xuXHQgbGVmdDogMTI0cHg7XG59XG4uaGVhZGVyX19hdXRvci10b3Age1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdG1hcmdpbi1ib3R0b206IDg2cHg7XG59XG4uaGVhZGVyX19hdXRvci10b3AtLXRpdGxlIHtcblx0bWF4LXdpZHRoOiA1Ni4xJTtcbn1cbi5oZWFkZXJfX2F1dG9yLXRvcC0tdGl0bGUgaDIge1xuXHRmb250LWZhbWlseTogJ09wZW4gU2Fucyc7XG5cdGZvbnQtd2VpZ2h0OiA1MDA7XG5cdGZvbnQtc2l6ZTogNzJweDtcblx0bGluZS1oZWlnaHQ6IDExMCU7XG5cdGNvbG9yOiAjRjlGOUY5O1xuXHRtYXJnaW4tcmlnaHQ6IDY0cHg7XG59XG4uaGVhZGVyX19hdXRvci10b3AtLWNvbnRlbnQge1xuXHRcbn0iLCJAbWl4aW4gYnJlYWtwb2ludCgkYnIpIHtcblx0QG1lZGlhIChtYXgtd2lkdGg6ICRicikge1xuXHRcdEBjb250ZW50O1xuXHR9XG59Il19 */