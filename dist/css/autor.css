/* http://meyerweb.com/eric/tools/css/reset/
   v2.0-modified | 20110126
   License: none (public domain)
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  vertical-align: baseline;
}

a {
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

ol,
ul {
  list-style: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

textarea {
  overflow: auto;
  vertical-align: top;
  resize: vertical;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */

audio,
canvas,
video {
  display: inline-block;
  *display: inline;
  *zoom: 1;
  max-width: 100%;
}

a:focus {
  outline: thin dotted;
}

a:active,
a:hover {
  outline: 0;
}

form {
  margin: 0;
}

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

button,
input {
  line-height: normal;
}

button,
select {
  text-transform: none;
}

button[disabled],
html input[disabled] {
  cursor: default;
}

input[type=search]::-webkit-search-cancel-button,
input[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

textarea {
  resize: vertical;
}

.chromeframe {
  margin: 0.2em 0;
  background: #ccc;
  color: #000;
  padding: 0.2em 0;
}

*,
*::before,
*::after {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

body {
  font: 14px/1.5 -apple-system, "Plus Jakarta Sans", Roboto, sans-serif;
  background: #ffffff;
  max-width: 1440px;
  color: #ffffff;
}

body.no-scroll {
  overflow: hidden;
}

.container {
  max-width: 1192px;
  margin: 0 auto;
}

.header-autor {
  background: #1C1C1C;
  position: relative;
}

.header__autor-list {
  position: absolute;
  top: 26px;
  right: 124px;
}

.header__box {
  position: absolute;
  top: 192px;
  left: 124px;
}

.header__autor-top {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin-bottom: 86px;
}

.header__autor-top--title {
  max-width: 56.1%;
}

.header__autor-top--title h2 {
  font: 500 72px/110% "Open Sans";
  color: #F9F9F9;
  margin-right: 64px;
}

@supports (-webkit-appearance:none) {

}

@media (max-width: 1300px) {
  .header__autor-list {
    right: 50px;
  }

@supports (-webkit-appearance:none) {

}
}

@media (max-width: 1192px) {
  .container {
    padding: 0 20px;
  }

@supports (-webkit-appearance:none) {

}
}

@media (max-width: 1095px) {
  .header__autor-list {
    display: none;
  }

@supports (-webkit-appearance:none) {

}
}

@media (max-width: 740px) {
  .container {
    padding: 0 10px;
  }

@supports (-webkit-appearance:none) {

}
}

@media (max-width: 700px) {
  body {
    color: #fff;
    background-color: #000;
  }

@supports (-webkit-appearance:none) {

}
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */